[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Portfolio",
    "section": "",
    "text": "Big foot in shiny with dark mode\n\n\n\nR\n\n\nshiny\n\n\nbslib\n\n\ndark mode\n\n\nEDA\n\n\ndata vis\n\n\n\nThe phenomenon of the Big foot or where to go to get to know it?\n\n\n\n\n\n\nJan 28, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHR analytics\n\n\n\npython\n\n\nEDA\n\n\ndata vis\n\n\nsklearn\n\n\nmodels\n\n\n\nHappy employees, so why they are leaving?\n\n\n\n\n\n\nFeb 10, 2020\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObject detection\n\n\n\npython\n\n\nobject detection\n\n\ntensorflow\n\n\ndata vis\n\n\n\nYOLO Object detection and couple thoughts on safety issue\n\n\n\n\n\n\nDec 16, 2019\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMachine Learnig for phones\n\n\n\npython\n\n\nsklearn\n\n\nmodels\n\n\nEDA\n\n\ndata vis\n\n\npandas\n\n\nmatplotlib\n\n\n\nHow to evaluate the phone price based on technical parameters?\n\n\n\n\n\n\nMar 19, 2019\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRegression for Housing Prices\n\n\n\nR\n\n\ntidyverse\n\n\nEDA\n\n\nmodels\n\n\ndata vis\n\n\n\nBuying a house in Seattle, or how much does a 1/2 bathroom cost?\n\n\n\n\n\n\nMay 27, 2018\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAssociation Rules in Groceries\n\n\n\nR\n\n\nMarket Basket Analysis\n\n\nEDA\n\n\ndata vis\n\n\n\nArranging shop or why is milk always farthest from cash desk?\n\n\n\n\n\n\nMay 27, 2018\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Janina Smo≈Ça",
    "section": "",
    "text": "programming ‚Äì data analysis ‚Äì data visualization ‚Äì machine learning ‚Äì EDA R **** (shiny, ggplot2, plotly, dplyr, data.table, stringr, Rmarkdown and many others) - RStudio Python ** (Pandas, NumPy, Matplotlib, Seaborn, Sklearn, Keras) - jupyter notebook git ****, Tableau * , PowerBI *, SQL * , linux *, docker * , MS Office + VBA **\n\n\n\nDeveloper of interactive analytical shiny applications. Data Analyst with strong visualization skills. Programming mainly in R and looking for an opportunity to gain experience in Python.\nWell-organized person managing time effectively, working in teams towards a common goal, mindful of small details but handling multiple tasks prioritizing the most important. Sticking to the rule and behaving honestly and ethically. Understanding the trade-off between speed and quality, but never agreeing to completely sacrifice the other.\nFormer civil engineer with experience in designing, evaluating, and constructing bridges and tunnels, project coordination, optimization, and cooperating with other parties"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Big foot in shiny with dark mode\n\n\n\nR\n\n\nshiny\n\n\nbslib\n\n\ndark mode\n\n\nEDA\n\n\ndata vis\n\n\n\nThe phenomenon of the Big foot or where to go to get to know it?\n\n\n\n\n\n\nJan 28, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHR analytics\n\n\n\npython\n\n\nEDA\n\n\ndata vis\n\n\nsklearn\n\n\nmodels\n\n\n\nHappy employees, so why they are leaving?\n\n\n\n\n\n\nFeb 10, 2020\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObject detection\n\n\n\npython\n\n\nobject detection\n\n\ntensorflow\n\n\ndata vis\n\n\n\nYOLO Object detection and couple thoughts on safety issue\n\n\n\n\n\n\nDec 16, 2019\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMachine Learnig for phones\n\n\n\npython\n\n\nsklearn\n\n\nmodels\n\n\nEDA\n\n\ndata vis\n\n\npandas\n\n\nmatplotlib\n\n\n\nHow to evaluate the phone price based on technical parameters?\n\n\n\n\n\n\nMar 19, 2019\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRegression for Housing Prices\n\n\n\nR\n\n\ntidyverse\n\n\nEDA\n\n\nmodels\n\n\ndata vis\n\n\n\nBuying a house in Seattle, or how much does a 1/2 bathroom cost?\n\n\n\n\n\n\nMay 27, 2018\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAssociation Rules in Groceries\n\n\n\nR\n\n\nMarket Basket Analysis\n\n\nEDA\n\n\ndata vis\n\n\n\nArranging shop or why is milk always farthest from cash desk?\n\n\n\n\n\n\nMay 27, 2018\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Bigfoot_App/index.html",
    "href": "posts/Bigfoot_App/index.html",
    "title": "Big foot in shiny with dark mode",
    "section": "",
    "text": "In the last 150 years in the United States, the Bigfoot has been observed 4045 times‚Ä¶\nI invite you to explore this subject in my Bigfoot App. Try to find answers: ü§î\n\nHow the phase of the moon affects the number of met Bigfoot? üåô\nWhat season of the year is favorable for meetings with Bigfoot? üçÅ ‚ùÑÔ∏è üåû üå∏\nWhich word occurs most often in the descriptions of meeting with Big Foot? üìù\nWhich state of the US may be called the home of Bigfoot? üè†\n\nHave fun üéâ Bigfoot App"
  },
  {
    "objectID": "posts/Bigfoot_App/index.html#about-project",
    "href": "posts/Bigfoot_App/index.html#about-project",
    "title": "Big foot in shiny with dark mode",
    "section": "About project",
    "text": "About project\nThat is my side project that used TidyTuesday dataset to practice dark mode because it is ‚Äúthe most requested feature in the app‚Äù üëÄ\nI have built an app using packages bslib and imola. The colors were taken from the original site of Bigfoot Field Researchers Organization\nThe application has three tabs:\n\nOverview where you can see all recorded observations\nExplore where you can investigate observation from a specific time range\nSource where you can find basic information and assumptions"
  },
  {
    "objectID": "posts/Phones/index.html",
    "href": "posts/Phones/index.html",
    "title": "Machine Learnig for phones",
    "section": "",
    "text": "Analysis of the mobile phone market and an attempt to determine the price range depending on technical parameters. According to the task description - only train data from origin dataset was used for the analysis, strongly developing exploratory data analysis\n\nMore"
  },
  {
    "objectID": "posts/Housing_Prices/index.html",
    "href": "posts/Housing_Prices/index.html",
    "title": "Regression for Housing Prices",
    "section": "",
    "text": "That was my very first project ‚Äúbespoke‚Äù with real dataset and the nice job of predicting the price of a house.\nI have used three models: Regression, Support Vector Regression and Random Forest. It is not hard to guess which one was the best üôÉ I made a lot of beginner mistakes, but I have a lot of sentiment for this project."
  },
  {
    "objectID": "posts/Housing_Prices/index.html#source",
    "href": "posts/Housing_Prices/index.html#source",
    "title": "Regression for Housing Prices",
    "section": "1.1 Source",
    "text": "1.1 Source\nAccording to the instruction from Client - only columns with no 1:15 should be used for model building purposes, that is:\n\n\n\n\n\n\n\n\nname\ntype\ndescription\n\n\n\n\nid\nstr\ndatabase identifier of the current row\n\n\ndate\nstr\npricing date\n\n\nprice\nfloat\nthe price\n\n\nbedrooms\nfloat\nnumber of bedrooms\n\n\nbathrooms\nfloat\nnumber of bathrooms\n\n\nsqft_living\nfloat\nliving space area\n\n\nsqft_lot\nint\nlot area\n\n\nfloors\nfloat\nnumber of floors\n\n\nwaterfront\nint\nindicator of whether the property is facing water {0,1}\n\n\nview\nint\nquality of view from the property (0:4)\n\n\ncondition\nint\nproperty condition (1:5)\n\n\ngrade\nint\nproperty grade (1:13)\n\n\nsqft_above\nint\nliving area above ground level\n\n\nsqft_basement\nint\narea of basement\n\n\nyr_built\nint\nyear the building was built\n\n\n\nSize of dataset\n\n\n[1] 21613    21"
  },
  {
    "objectID": "posts/Housing_Prices/index.html#a-quick-look-at-the-dataset",
    "href": "posts/Housing_Prices/index.html#a-quick-look-at-the-dataset",
    "title": "Regression for Housing Prices",
    "section": "1.2 A quick look at the dataset",
    "text": "1.2 A quick look at the dataset\n\n\n\n\n\nHistograms\n\n\n\n\n\n\n\n\n\nCorrplot\n\n\n\n\nFIRST OBSERVATION ABOUT DATA SET\n\nvariables waterfront, view, condition and grade are the categorical type variable (Factor),\nvariable date has to be change to date type,\nto consideration: variable yr_built has to be change to date type,\nto consideration: variable id has to be in normal not scientific format,\nquestion: why variable bathrooms - number of bathrooms - has not integer value?\nquestion: why variable floors - number of floor - has not integer value? (mezzanine?)\nquestion: what describes variable condition? is that the expert opinion (subjective) or same evaluation made on an objective scale?\nquestion: what has coded variable grade?\nquite good correlation (DV): price ~ sqft_living, price ~ grade, price ~ sqft_above\nvery strong correlation: sqft_above ~ sqft_living (are they dependant?),\nquite good correlation: sqft_above ~ bathrooms, sqft_living ~ grade, sqft_above ~ grade, bathrooms ~ grade, bathrooms ~ sqft_above\n\nTYPES OF VARIABLES\n\nvariable - object identifier: id\ndependent variable - continuous variable: price\nindependent variable - numerical variable (discrete): date, bedrooms, bathrooms, floors, yr_built\nindependent variable - numerical variable (continuous): sqft_living, sqft_lot, sqft_above, sqft_basement\nindependent variable - categorical variable (nominal): waterfront, view, grade\nindependent variable - categorical variable (probably ordinal): condition"
  },
  {
    "objectID": "posts/Housing_Prices/index.html#nas-check",
    "href": "posts/Housing_Prices/index.html#nas-check",
    "title": "Regression for Housing Prices",
    "section": "1.3 NAs check",
    "text": "1.3 NAs check\nChecking if any NAs are in the data\n\n\n[1] FALSE"
  },
  {
    "objectID": "posts/Housing_Prices/index.html#variable-price",
    "href": "posts/Housing_Prices/index.html#variable-price",
    "title": "Regression for Housing Prices",
    "section": "2.1 Variable price",
    "text": "2.1 Variable price\n\nplot_boxplot(df_house$price/1000, xlab = \"price [k$]\")\n\n\n\n\nBoxplot of house prices\n\n\n\n\n\nplot_hist(df_house$price/1000, xlab = \"price [k$]\", stat_flag = c(TRUE, TRUE, FALSE), breaks = 80)\ngrid()\n\n\n\n\nHistogram of house prices"
  },
  {
    "objectID": "posts/Housing_Prices/index.html#variable-date",
    "href": "posts/Housing_Prices/index.html#variable-date",
    "title": "Regression for Housing Prices",
    "section": "2.2 Variable date",
    "text": "2.2 Variable date\nBulid new variable - the proper format of date for variable date\n\ndf_house$date_pro <- as.Date(df_house$date, \"%Y%m%dT000000\")\n\n\n\n\nThe most priced home - offer with id no 142 from data 53\n\nplot_barplot_with_stat(table(df_house$date_pro), \n                       ylim = c(0, 160), ylab = \"count\", border = col_main_2)\n\n\n\n\nPlot of number of houses priced in the time division (days)\n\n\n\n\nREMARKS During summer months much more houses are valued than at the beginning of the year (winter).\nBuliding new variable - date_Ym built only on information about year and month of pricing date\n\ndf_house$date_Ym <- strftime(as.Date(df_house$date, \"%Y%m%dT000000\"), \"%Y-%m\")\nhead(df_house$date_Ym)\n\n[1] \"2014-10\" \"2014-12\" \"2015-02\" \"2014-12\" \"2015-02\" \"2014-05\"\n\n\n\nplot_barplot_with_stat(table(df_house$date_Ym), ylim = c(0, 2500), ylab = \"count\", fg_r = 10)\n\n\n\n\nPlot of number of houses priced in the time division (months)"
  },
  {
    "objectID": "posts/Housing_Prices/index.html#variable-id",
    "href": "posts/Housing_Prices/index.html#variable-id",
    "title": "Regression for Housing Prices",
    "section": "2.3 Variable id",
    "text": "2.3 Variable id\nChanging scientific format of id to more user friendly character format\n\nformat(df_house$id, scientific = FALSE)[1:10]\n\n [1] \"7129300520\" \"6414100192\" \"5631500400\" \"2487200875\" \"1954400510\"\n [6] \"7237550310\" \"1321400060\" \"2008000270\" \"2414600126\" \"3793500160\"\n\ndf_house$id <- format(df_house$id, scientific = FALSE) %>% stringr::str_trim()\n\nIs there are no duplicated items TRUE\n\n\n\nNOTE there are 177 duplicated ids!\nExample\n\nfilter(df_house, id == 1000102)\n\n       id            date  price bedrooms bathrooms sqft_living sqft_lot floors\n1 1000102 20140916T000000 280000        6         3        2400     9373      2\n2 1000102 20150422T000000 300000        6         3        2400     9373      2\n  waterfront view condition grade sqft_above sqft_basement yr_built\n1          0    0         3     7       2400             0     1991\n2          0    0         3     7       2400             0     1991\n  yr_renovated zipcode     lat     long sqft_living15 sqft_lot15   date_pro\n1            0   98002 47.3262 -122.214          2060       7316 2014-09-16\n2            0   98002 47.3262 -122.214          2060       7316 2015-04-22\n  date_Ym\n1 2014-09\n2 2015-04\n\nfilter(df_house, id == 7200179)\n\n       id            date  price bedrooms bathrooms sqft_living sqft_lot floors\n1 7200179 20141016T000000 150000        2         1         840    12750      1\n2 7200179 20150424T000000 175000        2         1         840    12750      1\n  waterfront view condition grade sqft_above sqft_basement yr_built\n1          0    0         3     6        840             0     1925\n2          0    0         3     6        840             0     1925\n  yr_renovated zipcode    lat     long sqft_living15 sqft_lot15   date_pro\n1            0   98055 47.484 -122.211          1480       6969 2014-10-16\n2            0   98055 47.484 -122.211          1480       6969 2015-04-24\n  date_Ym\n1 2014-10\n2 2015-04\n\nfilter(df_house, id == 109200390)\n\n         id            date  price bedrooms bathrooms sqft_living sqft_lot\n1 109200390 20140820T000000 245000        3      1.75        1480     3900\n2 109200390 20141020T000000 250000        3      1.75        1480     3900\n  floors waterfront view condition grade sqft_above sqft_basement yr_built\n1      1          0    0         4     7       1480             0     1980\n2      1          0    0         4     7       1480             0     1980\n  yr_renovated zipcode     lat     long sqft_living15 sqft_lot15   date_pro\n1            0   98023 47.2977 -122.367          1830       6956 2014-08-20\n2            0   98023 47.2977 -122.367          1830       6956 2014-10-20\n  date_Ym\n1 2014-08\n2 2014-10\n\n\nREMARK Only one diffrence in duplicated item is variable date (also new built based on it - date_pro and date_Ym) and variable price (?)\nList of duplicate ids with price and date of pricing date_pro (for analysis what is different)\n\n\n\n\nfilter(df_house, id %in% ls_dup_id) %>% select(id, price, date_pro) %>% head(10)\n\n           id   price   date_pro\n1  6021501535  430000 2014-07-25\n2  6021501535  700000 2014-12-23\n3  4139480200 1384000 2014-06-18\n4  4139480200 1400000 2014-12-09\n5  7520000520  232000 2014-09-05\n6  7520000520  240500 2015-03-11\n7  3969300030  165000 2014-07-23\n8  3969300030  239900 2014-12-29\n9  2231500030  315000 2014-10-01\n10 2231500030  530000 2015-03-24\n\nfilter(df_house, id %in% ls_dup_id) %>% select(date_Ym) %>% table()\n\ndate_Ym\n2014-05 2014-06 2014-07 2014-08 2014-09 2014-10 2014-11 2014-12 2015-01 2015-02 \n     21      27      24      29      25      28      21      27      23      30 \n2015-03 2015-04 2015-05 \n     40      42      16 \n\n\nChecking number of duplicates (there can be some triplicate)\n\nfilter(df_house, id %in% ls_dup_id) %>% \n  select(id) %>% table() %>% \n  plot(xaxt = \"n\", col = c(col_grey, col_main_2)[1+(. == max(.))], \n       las = 1, frame = FALSE, cex.axis = 0.8)\n\n\n\n\nPlot of triplicate\n\n\n\n\nSome items occure 3 times - checking:\n\nfilter(df_house, id %in% ls_dup_id) %>% select(id) %>% table() %>% which.max()\n\n795000620 \n      144 \n\nfilter(df_house[1:15], id == 795000620)\n\n         id            date  price bedrooms bathrooms sqft_living sqft_lot\n1 795000620 20140924T000000 115000        3         1        1080     6250\n2 795000620 20141215T000000 124000        3         1        1080     6250\n3 795000620 20150311T000000 157000        3         1        1080     6250\n  floors waterfront view condition grade sqft_above sqft_basement yr_built\n1      1          0    0         2     5       1080             0     1950\n2      1          0    0         2     5       1080             0     1950\n3      1          0    0         2     5       1080             0     1950\n\n\nREMARK Each time the price is different!\nMinor df: data frame with duplicated ids (for comparision how the price changes)\n\ndf_dup_id <- filter(df_house, id %in% ls_dup_id, id != 795000620) %>% select(id, price, date_pro) \n\nMinor df: data frame with difference between price of houses with duplicate ids\n\n\n\n\n\n\n\n\nPlot of price difference for duplicates\n\n\n\n\n3 items were pricing twice and the price of the house wasn‚Äôt changed => should they be treated as duplicates?\n\nfilter(df_delta_dup_id, delta == 0) %>% nrow()  \n\n[1] 3\n\nfilter(df_delta_dup_id, delta == 0)[ , 1] \n\n[1] \"1825069031\" \"6308000010\" \"8648900110\"\n\n\n6 items were pricing twice and the price of the house has dropped over time\n\nfilter(df_delta_dup_id, delta < 0) %>% nrow()  \n\n[1] 6\n\nfilter(df_delta_dup_id, delta < 0)[ , 1] \n\n[1] \"8682262400\" \"2726049071\" \"4139420590\" \"2767603612\" \"7167000040\"\n[6] \"2619920170\"\n\n\n166 items were pricing twice and the price of the house has increased over time\n\nfilter(df_delta_dup_id, delta > 0) %>% nrow() \n\n[1] 166\n\nfilter(df_house[ , c(1:15,22:23)], id %in% filter(df_delta_dup_id, delta < 0)[ , 1])\n\n           id            date   price bedrooms bathrooms sqft_living sqft_lot\n1  8682262400 20140718T000000  430000        2      1.75        1350     4003\n2  8682262400 20150513T000000  419950        2      1.75        1350     4003\n3  2726049071 20141211T000000  510000        2      1.00         820     4206\n4  2726049071 20150408T000000  489950        2      1.00         820     4206\n5  4139420590 20140520T000000 1212500        4      3.50        4560    16643\n6  4139420590 20140827T000000 1200000        4      3.50        4560    16643\n7  2767603612 20140512T000000  500000        2      2.25        1290     1334\n8  2767603612 20150113T000000  489000        2      2.25        1290     1334\n9  7167000040 20140813T000000  740000        4      3.00        3350   199253\n10 7167000040 20150305T000000  700000        4      3.00        3350   199253\n11 2619920170 20141001T000000  772500        4      2.50        3230     4290\n12 2619920170 20141219T000000  765000        4      2.50        3230     4290\n   floors waterfront view condition grade sqft_above sqft_basement yr_built\n1       1          0    0         3     8       1350             0     2004\n2       1          0    0         3     8       1350             0     2004\n3       1          0    0         3     5        820             0     1949\n4       1          0    0         3     5        820             0     1949\n5       1          0    3         3    12       2230          2330     1995\n6       1          0    3         3    12       2230          2330     1995\n7       3          0    0         3     8       1290             0     2007\n8       3          0    0         3     8       1290             0     2007\n9       2          0    0         3    10       3350             0     2004\n10      2          0    0         3    10       3350             0     2004\n11      2          0    0         3     9       3230             0     2004\n12      2          0    0         3     9       3230             0     2004\n     date_pro date_Ym\n1  2014-07-18 2014-07\n2  2015-05-13 2015-05\n3  2014-12-11 2014-12\n4  2015-04-08 2015-04\n5  2014-05-20 2014-05\n6  2014-08-27 2014-08\n7  2014-05-12 2014-05\n8  2015-01-13 2015-01\n9  2014-08-13 2014-08\n10 2015-03-05 2015-03\n11 2014-10-01 2014-10\n12 2014-12-19 2014-12\n\n\nDUPLICATED? the same price - diffrent pricing date\n\nfilter(df_house[ , c(1:15,22:23)], id %in% filter(df_delta_dup_id, delta == 0)[ , 1])\n\n          id            date  price bedrooms bathrooms sqft_living sqft_lot\n1 1825069031 20140814T000000 550000        4      1.75        2410     8447\n2 1825069031 20141016T000000 550000        4      1.75        2410     8447\n3 6308000010 20141208T000000 585000        3      2.50        2290     5089\n4 6308000010 20150423T000000 585000        3      2.50        2290     5089\n5 8648900110 20140505T000000 555000        3      2.50        1940     3211\n6 8648900110 20140826T000000 555000        3      2.50        1940     3211\n  floors waterfront view condition grade sqft_above sqft_basement yr_built\n1      2          0    3         4     8       2060           350     1936\n2      2          0    3         4     8       2060           350     1936\n3      2          0    0         3     9       2290             0     2001\n4      2          0    0         3     9       2290             0     2001\n5      2          0    0         3     8       1940             0     2009\n6      2          0    0         3     8       1940             0     2009\n    date_pro date_Ym\n1 2014-08-14 2014-08\n2 2014-10-16 2014-10\n3 2014-12-08 2014-12\n4 2015-04-23 2015-04\n5 2014-05-05 2014-05\n6 2014-08-26 2014-08\n\n\nREMARKS In dataset are 177 items that have duplicated id (exception id = 795000620 listed 3 times) - the diffrence is only in variable date and price (with 3 exception where the price is the same). In the model, the variable id will not be used, so it is important to decide how to deal with these duplicates.\nPROPOSAL: cancel only second item with the same id from the ids‚Äô list with the same price and diffrent pricing date.\nBulid new variable - indicators of whether to delete the given item\nList of duplicated items - houses for that the price is the same on diffrent pricing date\n\n(ls_rm_3id <- filter(df_house, id %in% filter(df_delta_dup_id, delta == 0)[ , 1]) %>% \n   filter(row_number() %% 2 == 0))\n\n          id            date  price bedrooms bathrooms sqft_living sqft_lot\n1 1825069031 20141016T000000 550000        4      1.75        2410     8447\n2 6308000010 20150423T000000 585000        3      2.50        2290     5089\n3 8648900110 20140826T000000 555000        3      2.50        1940     3211\n  floors waterfront view condition grade sqft_above sqft_basement yr_built\n1      2          0    3         4     8       2060           350     1936\n2      2          0    0         3     9       2290             0     2001\n3      2          0    0         3     8       1940             0     2009\n  yr_renovated zipcode     lat     long sqft_living15 sqft_lot15   date_pro\n1         1980   98074 47.6499 -122.088          2520      14789 2014-10-16\n2            0   98006 47.5443 -122.172          2290       7984 2015-04-23\n3            0   98027 47.5644 -122.093          1880       3078 2014-08-26\n  date_Ym rm\n1 2014-10  0\n2 2015-04  0\n3 2014-08  0\n\ndf_house[df_house$id %in%  ls_rm_3id$id, \"rm\"] <- 1\n\nChecked\n\nfilter(df_house, id %in% filter(df_delta_dup_id, delta == 0)[ , 1])\n\n          id            date  price bedrooms bathrooms sqft_living sqft_lot\n1 1825069031 20140814T000000 550000        4      1.75        2410     8447\n2 1825069031 20141016T000000 550000        4      1.75        2410     8447\n3 6308000010 20141208T000000 585000        3      2.50        2290     5089\n4 6308000010 20150423T000000 585000        3      2.50        2290     5089\n5 8648900110 20140505T000000 555000        3      2.50        1940     3211\n6 8648900110 20140826T000000 555000        3      2.50        1940     3211\n  floors waterfront view condition grade sqft_above sqft_basement yr_built\n1      2          0    3         4     8       2060           350     1936\n2      2          0    3         4     8       2060           350     1936\n3      2          0    0         3     9       2290             0     2001\n4      2          0    0         3     9       2290             0     2001\n5      2          0    0         3     8       1940             0     2009\n6      2          0    0         3     8       1940             0     2009\n  yr_renovated zipcode     lat     long sqft_living15 sqft_lot15   date_pro\n1         1980   98074 47.6499 -122.088          2520      14789 2014-08-14\n2         1980   98074 47.6499 -122.088          2520      14789 2014-10-16\n3            0   98006 47.5443 -122.172          2290       7984 2014-12-08\n4            0   98006 47.5443 -122.172          2290       7984 2015-04-23\n5            0   98027 47.5644 -122.093          1880       3078 2014-05-05\n6            0   98027 47.5644 -122.093          1880       3078 2014-08-26\n  date_Ym rm\n1 2014-08  1\n2 2014-10  1\n3 2014-12  1\n4 2015-04  1\n5 2014-05  1\n6 2014-08  1"
  },
  {
    "objectID": "posts/Housing_Prices/index.html#variable-bedrooms",
    "href": "posts/Housing_Prices/index.html#variable-bedrooms",
    "title": "Regression for Housing Prices",
    "section": "2.4 Variable bedrooms",
    "text": "2.4 Variable bedrooms\n\n\n\n\n\n\nplot_boxplot(df_house$bedrooms, xlab = \"number of bedrooms\")\n\n\n\n\nBoxplot of bedrooms\n\n\n\n\nNOTE\nAccording to the american standards for houses appraisal (given data set is a list of houses located in area of Seattle, state of Washington) bedroom must be of adequate size (100 square feet or more), have a closet, a window and a door. It must be heated/cooled and finished in the same quality as the rest of the house. It must also be above grade and have reasonable access to a full bathroom. Basement bedrooms (50% below adjacent grade level) may NOT be counted in the total bedrooms count.\nOUTLIER OR MISTAKE ?\n\nfilter(df_house[ , c(1:15,22:24)], bedrooms == 33)\n\n          id            date  price bedrooms bathrooms sqft_living sqft_lot\n1 2402100895 20140625T000000 640000       33      1.75        1620     6000\n  floors waterfront view condition grade sqft_above sqft_basement yr_built\n1      1          0    0         5     7       1040           580     1947\n    date_pro date_Ym rm\n1 2014-06-25 2014-06  0\n\n\nAnalysis of similar items (only one parameters)\n\n\n\n\n\nAnalysis of parameters for houses to outlier 33 (separately)\n\n\n\n\nREMARKS similar items (the same value for diffrent parameters: grade = 7, bathrooms = 1.75, sqft_living = 1620, floors = 1, price = 640000, yr_built = 1947) show that the most popular value for badrooms is 3.\nAnalysis of similar items (all parametres)\n\n\n\n\n\nAnalysis of parameters for houses to outlier 33 (all in one)\n\n\n\n\nDECISION: it is a mistake ‚áí 33 has to be change into 3\n\ndf_house[df_house$bedrooms == 33, 'bedrooms'] <- 3\n\nRe-analysis\n\ntable(df_house$bedrooms)\n\n\n   0    1    2    3    4    5    6    7    8    9   10   11 \n  13  199 2760 9825 6882 1601  272   38   13    6    3    1 \n\nsummary(df_house$bedrooms)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   3.000   3.000   3.369   4.000  11.000 \n\n\n\nplot_boxplot(df_house$bedrooms, xlab = \"number of bedrooms\", stat_flag = c(TRUE, FALSE, FALSE))\n\n\n\n\nBoxplot of bedrooms\n\n\n\n\n\nplot_barplot_with_stat(table(df_house$bedrooms), stat_flag = c(TRUE, FALSE, FALSE), fg_r = 100)\n\n\n\n\nPlot of number of bedrooms\n\n\n\n\nARE THESE DATA PROPER? to consideration: removing these items\n\nfilter(df_house[ , c(1:15,22:24)], bedrooms == 0)\n\n           id            date   price bedrooms bathrooms sqft_living sqft_lot\n1  6306400140 20140612T000000 1095000        0      0.00        3064     4764\n2  3918400017 20150205T000000  380000        0      0.00        1470      979\n3  1453602309 20140805T000000  288000        0      1.50        1430     1650\n4  6896300380 20141002T000000  228000        0      1.00         390     5900\n5  2954400190 20140624T000000 1295650        0      0.00        4810    28008\n6  2569500210 20141117T000000  339950        0      2.50        2290     8319\n7  2310060040 20140925T000000  240000        0      2.50        1810     5669\n8  3374500520 20150429T000000  355000        0      0.00        2460     8049\n9  7849202190 20141223T000000  235000        0      0.00        1470     4800\n10 7849202299 20150218T000000  320000        0      2.50        1490     7111\n11 9543000205 20150413T000000  139950        0      0.00         844     4269\n12 1222029077 20141029T000000  265000        0      0.75         384   213444\n13 3980300371 20140926T000000  142000        0      0.00         290    20875\n   floors waterfront view condition grade sqft_above sqft_basement yr_built\n1     3.5          0    2         3     7       3064             0     1990\n2     3.0          0    2         3     8       1470             0     2006\n3     3.0          0    0         3     7       1430             0     1999\n4     1.0          0    0         2     4        390             0     1953\n5     2.0          0    0         3    12       4810             0     1990\n6     2.0          0    0         3     8       2290             0     1985\n7     2.0          0    0         3     7       1810             0     2003\n8     2.0          0    0         3     8       2460             0     1990\n9     2.0          0    0         3     7       1470             0     1996\n10    2.0          0    0         3     7       1490             0     1999\n11    1.0          0    0         4     7        844             0     1913\n12    1.0          0    0         3     4        384             0     2003\n13    1.0          0    0         1     1        290             0     1963\n     date_pro date_Ym rm\n1  2014-06-12 2014-06  0\n2  2015-02-05 2015-02  0\n3  2014-08-05 2014-08  0\n4  2014-10-02 2014-10  0\n5  2014-06-24 2014-06  0\n6  2014-11-17 2014-11  0\n7  2014-09-25 2014-09  0\n8  2015-04-29 2015-04  0\n9  2014-12-23 2014-12  0\n10 2015-02-18 2015-02  0\n11 2015-04-13 2015-04  0\n12 2014-10-29 2014-10  0\n13 2014-09-26 2014-09  0\n\n\nREMARKS Basement bedrooms (50% below adjacent grade level) may NOT be counted in the total bedrooms count, but none of these items have basement. It‚Äôs also possible that some of them do not meet with the requirements."
  },
  {
    "objectID": "posts/Housing_Prices/index.html#variable-floors",
    "href": "posts/Housing_Prices/index.html#variable-floors",
    "title": "Regression for Housing Prices",
    "section": "2.5 Variable floors",
    "text": "2.5 Variable floors\n\nplot_boxplot(df_house$floors, xlab = \"number of floors\")\n\n\n\n\nPlot of number of floors\n\n\n\n\nNOTE According to the american standards for houses appraisal (given data set is a list of houses located in area of Seattle, state of Washington) attics and mezzanine should be count as half floor. So the data - even if the number of floor isn‚Äôt integer - should be considered as correct. Basement should NOT be counted in the total floor count.\n\nplot_barplot_with_stat(table(df_house$floors), stat_flag = c(TRUE, TRUE, FALSE), fg_r = 100)\n\n\n\n\nPlot of floors‚Äô number"
  },
  {
    "objectID": "posts/Housing_Prices/index.html#variable-waterfront",
    "href": "posts/Housing_Prices/index.html#variable-waterfront",
    "title": "Regression for Housing Prices",
    "section": "2.6 Variable waterfront",
    "text": "2.6 Variable waterfront\n\nplot_barplot(table(df_house$waterfront), xlab = \"indicator of whether the property is facing water\",\n        names.arg = c(\"no facing water\", \"facing water\"))\n\n\n\n\nPlot of waterfront\n\n\n\n\nREMARKS Almost no house (only 0,7% of all) has a view of the water, what is quite interesting in the Seattle (port city)."
  },
  {
    "objectID": "posts/Housing_Prices/index.html#variable-view",
    "href": "posts/Housing_Prices/index.html#variable-view",
    "title": "Regression for Housing Prices",
    "section": "2.7 Variable view",
    "text": "2.7 Variable view\n\nplot_barplot(table(df_house$view), xlab = \"quality of view from the property\")\n\n\n\n\nPlot of view"
  },
  {
    "objectID": "posts/Housing_Prices/index.html#variable-condition",
    "href": "posts/Housing_Prices/index.html#variable-condition",
    "title": "Regression for Housing Prices",
    "section": "2.8 Variable condition",
    "text": "2.8 Variable condition\n\nplot_barplot(table(df_house$condition),xlab = \"property condition\")\n\n\n\n\nPlot of condition"
  },
  {
    "objectID": "posts/Housing_Prices/index.html#variable-grade",
    "href": "posts/Housing_Prices/index.html#variable-grade",
    "title": "Regression for Housing Prices",
    "section": "2.9 Variable grade",
    "text": "2.9 Variable grade\n\nplot_barplot(table(df_house$grade), xlab = \"property grade\")\n\n\n\n\nPlot of grade\n\n\n\n\nAnalysis: is the grade dependant of floors?\n\n\n\n\n\nCorrplot\n\n\n\n\nREMARKS correlation grade ~ floor is not really strong (0.46), but correlation price ~ grade is strong (0.67)."
  },
  {
    "objectID": "posts/Housing_Prices/index.html#variable-yr_built",
    "href": "posts/Housing_Prices/index.html#variable-yr_built",
    "title": "Regression for Housing Prices",
    "section": "2.10 Variable yr_built",
    "text": "2.10 Variable yr_built\n\nplot_barplot(table(df_house$yr_built), xlab = \"year the building was built\", las = 2)\n\n\n\n\nPlot of yr_built\n\n\n\n\nAnalysis: is the price dependant of yr_built and condition?\n\n\n\n\n\nCorrplot\n\n\n\n\nREMARKS correlation yr_built ~ floor is not really strong (<0.05)\nCuriose: how often happened the renovation?\n\ndf_house[df_house$yr_renovated - df_house$yr_built > 0, ] %>% select(yr_built) %>% table() \n\nyr_built\n1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 \n  19    1    2    6    6   17    8   14   14   16   17   14   14   10    9   11 \n1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 \n   8    5   13   15   10    7   18   10   20   16   16    8   10    4   20    4 \n1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 \n   5    7    8    5    5   13    7   11   14   17   24   18   12    8   11   18 \n1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 \n  17   16   31   17   17   17   14   17    9   11   10    9    9    4   16   14 \n1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 \n   3   11    1   10   19   11    7    4    7    4    5    4    7    8    4    2 \n1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1996 1998 2003 \n   6    3    2    4    3    1    2    3    2    1    1    1    2    2    1 \n\n\nNot really often: only 914/21613 (4.2%) of houses was renovated\n\nfilter(df_house, yr_renovated != 0) %>% nrow()\n\n[1] 914\n\n\nBulid new variable: house_age - to solve a problem with difference of house age that is bind with different pricing date the price will be a function of one variable house_age and not of two variables date (pricing) and yr_built\nNOTE That has also its consequences: after canceling date (pricing) and yr_built there will be not longer possible to analysis the price change according the month of pricing or differnce during the year.\n\nplot_boxplot(df_house$house_age, xlab = \"house age [yrs]\")\n\n\n\n\nBoxplot of house age\n\n\n\n\n\nplot_barplot(table(df_house$house_age), xlab = \"house age [yrs]\")\n\n\n\n\nPlot of house age\n\n\n\n\nHow many houses was priced in the year of its built?\n\nfilter(df_house, house_age == 0) %>% nrow() ## 430\n\n[1] 430\n\nfilter(df_house, house_age < 0) \n\n           id            date  price bedrooms bathrooms sqft_living sqft_lot\n1  1832100030 20140625T000000 597326        4      4.00        3570     8250\n2  3076500830 20141029T000000 385195        1      1.00         710     6000\n3  9520900210 20141231T000000 614285        5      2.75        2730     6401\n4  1250200495 20140624T000000 455000        2      1.50        1200     1259\n5  2770601530 20140826T000000 500000        2      2.25        1570     1269\n6  9126100346 20140617T000000 350000        3      2.00        1380     3600\n7  9126100765 20140801T000000 455000        3      1.75        1320     1014\n8  9310300160 20140828T000000 357000        5      2.50        2990     9240\n9  1257201420 20140709T000000 595000        4      3.25        3730     4560\n10 6058600220 20140731T000000 230000        3      1.50        1040     1264\n11 5694500840 20141125T000000 559000        2      3.00        1650      960\n12 6169901185 20140520T000000 490000        5      3.50        4460     2975\n   floors waterfront view condition grade sqft_above sqft_basement yr_built\n1     2.0          0    0         3    10       2860           710     2015\n2     1.5          0    0         3     6        710             0     2015\n3     2.0          0    0         3     8       2730             0     2015\n4     2.0          0    0         3     8       1000           200     2015\n5     2.0          0    0         3     9       1280           290     2015\n6     3.0          0    0         3     8       1380             0     2015\n7     3.0          0    0         3     9       1320             0     2015\n8     2.0          0    0         3     8       2990             0     2015\n9     2.0          0    0         3     9       2760           970     2015\n10    2.0          0    0         3     9        900           140     2015\n11    3.0          0    0         3     8       1350           300     2015\n12    3.0          0    2         3    10       3280          1180     2015\n   yr_renovated zipcode     lat     long sqft_living15 sqft_lot15   date_pro\n1             0   98040 47.5784 -122.226          2230      10000 2014-06-25\n2             0   98144 47.5756 -122.316          1440       4800 2014-10-29\n3             0   98072 47.7685 -122.160          2520       6126 2014-12-31\n4             0   98144 47.6001 -122.298          1320       1852 2014-06-24\n5             0   98199 47.6514 -122.385          1570       6000 2014-08-26\n6             0   98122 47.6074 -122.305          1480       3600 2014-06-17\n7             0   98122 47.6047 -122.305          1380       1495 2014-08-01\n8             0   98133 47.7384 -122.348          1970      18110 2014-08-28\n9             0   98103 47.6725 -122.330          1800       4560 2014-07-09\n10            0   98144 47.5951 -122.301          1350       3000 2014-07-31\n11            0   98103 47.6611 -122.346          1650       3000 2014-11-25\n12            0   98119 47.6313 -122.370          2490       4231 2014-05-20\n   date_Ym rm house_age\n1  2014-06  0        -1\n2  2014-10  0        -1\n3  2014-12  0        -1\n4  2014-06  0        -1\n5  2014-08  0        -1\n6  2014-06  0        -1\n7  2014-08  0        -1\n8  2014-08  0        -1\n9  2014-07  0        -1\n10 2014-07  0        -1\n11 2014-11  0        -1\n12 2014-05  0        -1\n\n\nThere are 12 items that have for house age with value equal -1. It‚Äôs possible that investor asked about pricing based on design - not based on really existing building. Not to put ‚Äústrange data‚Äù into model and because it‚Äôs only 12 items (0.06% of all) the value -1 will be change into 0 (the houses that were priced in the same year that were also built).\nChecked\n\ndf_house[df_house$house_age == -1, \"house_age\"] <- 0\nfilter(df_house, house_age == -1) %>% select(house_age) \n\n[1] house_age\n<0 rows> (or 0-length row.names)\n\n\nRe-analysis\n\nplot_boxplot(df_house$house_age, xlab = \"\")\n\n\n\n\nBoxplot of house age[yrs]\n\n\n\n\n\nplot_barplot(table(df_house$house_age), xlab = \"house age\")\n\n\n\n\nPlot of house age\n\n\n\n\nNew minor variable date_Y to check how the price is correlated with the pricing date?\n\ndf_house$date_Y <- as.numeric(strftime(as.Date(df_house$date, \"%Y%m%dT000000\"), \"%Y\"))\n\n\n\n\n\n\nCorrplot\n\n\n\n\nREMARKS The price is not correlated with the pricing date so it was a good idea to build new variable house_age, it‚Äôs possible to cancle yr_built and date (with all group of variable based on it) and leave only house_age ."
  },
  {
    "objectID": "posts/Housing_Prices/index.html#variable-sqft_living",
    "href": "posts/Housing_Prices/index.html#variable-sqft_living",
    "title": "Regression for Housing Prices",
    "section": "2.11 Variable sqft_living",
    "text": "2.11 Variable sqft_living\n\nsummary(df_house$sqft_living) ## 100sf = 9.29m2\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    290    1427    1910    2080    2550   13540 \n\nsummary(df_house$sqft_living)/(100/9.29) # m2\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  26.94  132.57  177.44  193.22  236.90 1257.87 \n\n\n\nplot_boxplot(df_house$sqft_living, xlab = \"living space area [sqft]\")\n\n\n\n\nBoxplot of living space area\n\n\n\n\n\nplot_hist(df_house$sqft_living, xlab = \"living space area [sqft]\", breaks = 70)\n\n\n\n\nHistogram of living space area\n\n\n\n\n\nmax (> 750 m2 ~ 8070sf)\n\n\nfilter(df_house, sqft_living == 13540)\n\n          id            date   price bedrooms bathrooms sqft_living sqft_lot\n1 1225069038 20140505T000000 2280000        7         8       13540   307752\n  floors waterfront view condition grade sqft_above sqft_basement yr_built\n1      3          0    4         3    12       9410          4130     1999\n  yr_renovated zipcode     lat     long sqft_living15 sqft_lot15   date_pro\n1            0   98053 47.6675 -121.986          4850     217800 2014-05-05\n  date_Ym rm house_age date_Y\n1 2014-05  0        15   2014\n\nfilter(df_house, sqft_living > 8070) %>% select(bedrooms, bathrooms) %>% table()\n\n        bathrooms\nbedrooms 4.5 5.75 6.25 6.75 7.75 8\n       5   1    1    1    1    0 0\n       6   0    0    0    0    1 1\n       7   0    0    0    0    0 1\n\n\n\nmin (< 50 m2 ~ 540sf)\n\n\nfilter(df_house, sqft_living < 540) %>% select(bedrooms, bathrooms) %>% table()\n\n        bathrooms\nbedrooms  0 0.75  1\n       0  1    1  1\n       1  0   10 10\n       2  0    2  1\n       3  0    1  0"
  },
  {
    "objectID": "posts/Housing_Prices/index.html#variable-sqft_lot",
    "href": "posts/Housing_Prices/index.html#variable-sqft_lot",
    "title": "Regression for Housing Prices",
    "section": "2.12 Variable sqft_lot",
    "text": "2.12 Variable sqft_lot\n\nsummary(df_house$sqft_lot)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    520    5040    7618   15107   10688 1651359 \n\n\n\nsummary(df_house$sqft_lot)/(100/9.29) # m2\n\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n    48.31    468.22    707.71   1403.44    992.92 153411.25 \n\n\n\nsummary(df_house$sqft_lot)/1076.39 # ar\n\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n   0.4831    4.6823    7.0774   14.0348    9.9295 1534.1642 \n\n\n\nplot_boxplot(df_house$sqft_lot, xlab = \"lot area [sqft]\", outline = FALSE)\n\n\n\n\nBoxplot of lot area\n\n\n\n\n\nplot_hist(df_house$sqft_lot, xlab = \"lot area [sqft]\", breaks = 100)\n\n\n\n\nHistogram of lot area\n\n\n\n\n\nfilter(df_house, sqft_lot > 100000) %>% select(sqft_lot) %>% \n  plot_boxplot(xlab = \"living space area [sqft]\")\n\n\n\n\nBoxplot of living space area >10^5sqft\n\n\n\n\nREMARKS There are big difference between the smallest and the biggest lot"
  },
  {
    "objectID": "posts/Housing_Prices/index.html#variable-sqft_above",
    "href": "posts/Housing_Prices/index.html#variable-sqft_above",
    "title": "Regression for Housing Prices",
    "section": "2.13 Variable sqft_above",
    "text": "2.13 Variable sqft_above\n\nsummary(df_house$sqft_above)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    290    1190    1560    1788    2210    9410 \n\n\n\nsummary(df_house$sqft_above)/(100/9.29) # m2\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  26.94  110.55  144.92  166.14  205.31  874.19 \n\n\n\nplot_boxplot(df_house$sqft_above, xlab = \"living area above ground level [sqft]\")\n\n\n\n\nBoxplot of living area above ground level\n\n\n\n\n\nplot_hist(df_house$sqft_above, xlab = \"space area above [sqft]\", breaks = 80)\n\n\n\n\nHistogram of space area above\n\n\n\n\n\n\n\n\nAverage floor area\n\nsummary(round(df_house$sqft_above/df_house$floors, 2))\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  253.3   940.0  1185.0  1237.0  1465.0  5400.0 \n\n\n\nplot_hist(round(df_house$sqft_above/df_house$floors, 2), \n          xlab = \" average floor area [sqft]\", breaks = 50)\n\n\n\n\nHistogram of average floor area"
  },
  {
    "objectID": "posts/Housing_Prices/index.html#variable-sqft_basement",
    "href": "posts/Housing_Prices/index.html#variable-sqft_basement",
    "title": "Regression for Housing Prices",
    "section": "2.14 Variable sqft_basement",
    "text": "2.14 Variable sqft_basement\n\nsummary(df_house$sqft_basement)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    0.0     0.0     0.0   291.5   560.0  4820.0 \n\n\n\nsummary(df_house$sqft_basement)/(100/9.29) # m2\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    0.00   27.08   52.02  447.78 \n\n\nThe most popular basement area\n\nsort(table(df_house$sqft_basement), decreasing = TRUE)[1:10]\n\n\n    0   600   700   500   800   400  1000   900   300   200 \n13126   221   218   214   206   184   149   144   142   108 \n\n\n\nplot_boxplot(df_house$sqft_basement, xlab = \"area of basement [sqft]\")\n\n\n\n\nBoxplot of area of basement\n\n\n\n\n\nplot_hist(df_house$sqft_basement, xlab = \"basement area [sqft]\", breaks = 50)\n\n\n\n\nHistogram of basement area\n\n\n\n\n\nfilter(df_house, sqft_basement == 0) %>% nrow()\n\n[1] 13126\n\n\nREMARK 60% (13126/21613) of houses do not have basement\nWhich houses according to the number of floor do and do not have basement?\n\nfilter(df_house, sqft_basement == 0) %>% select(floors) %>% table()\n\nfloors\n   1  1.5    2  2.5    3  3.5 \n5156 1172 6195   80  516    7 \n\nfilter(df_house, sqft_basement != 0) %>% select(floors) %>% table()\n\nfloors\n   1  1.5    2  2.5    3  3.5 \n5524  738 2046   81   97    1 \n\n\nREMARK more-less: houses with floor number between 1.5 to 3.5 floors more often do not have than have the basement\nBulid new variable: is_basement indicator if the house has basement - to consideration (as bottom)\n\ntable(df_house$is_basement)\n\n\n    0     1 \n13126  8487 \n\n\n\nplot_barplot(table(df_house$is_basement), xlab = \"does house have basement?\", \n             names.arg = c(\"without basement\", \"with basement\"))\n\n\n\n\nPlot of basement indicator\n\n\n\n\nNOTE One variable can be removed.\n\ntable(df_house$sqft_basement + df_house$sqft_above == df_house$sqft_living)\n\n\n TRUE \n21613 \n\ntable(round((df_house$sqft_above/df_house$sqft_living), 2))\n\n\n 0.33  0.36  0.38  0.39   0.4  0.41  0.42  0.43  0.44  0.45  0.46  0.47  0.48 \n    1     1     1     1     1     1     3     3     3     1     3    11    10 \n 0.49   0.5  0.51  0.52  0.53  0.54  0.55  0.56  0.57  0.58  0.59   0.6  0.61 \n   11   603   160   152   126   127   155   152   218   219   228   223   187 \n 0.62  0.63  0.64  0.65  0.66  0.67  0.68  0.69   0.7  0.71  0.72  0.73  0.74 \n  212   199   233   246   288   367   333   240   243   212   207   210   251 \n 0.75  0.76  0.77  0.78  0.79   0.8  0.81  0.82  0.83  0.84  0.85  0.86  0.87 \n  231   214   222   203   181   185   184   173   177   116   110    95    73 \n 0.88  0.89   0.9  0.91  0.92  0.93  0.94  0.95  0.96  0.97  0.98  0.99     1 \n   76    88    64    58    44    40    50    28    15    12     3     3 13126 \n\n\n\n\n\n\n\nCorrplot\n\n\n\n\nREMARKS Because variables sqft_above and sqft_living are in strong correlation (0.88) - the best solution will be to cancle one of them.\nTO CONSIDERATION: pairs of variables: sqft_basement & sqft_above or sqft_living & is_basement"
  },
  {
    "objectID": "posts/Housing_Prices/index.html#proper-dataset",
    "href": "posts/Housing_Prices/index.html#proper-dataset",
    "title": "Regression for Housing Prices",
    "section": "3.1 Proper dataset",
    "text": "3.1 Proper dataset\n\ncolnames(df_house[c(3:14, 25, 27)])\n\n [1] \"price\"         \"bedrooms\"      \"bathrooms\"     \"sqft_living\"  \n [5] \"sqft_lot\"      \"floors\"        \"waterfront\"    \"view\"         \n [9] \"condition\"     \"grade\"         \"sqft_above\"    \"sqft_basement\"\n[13] \"house_age\"     \"is_basement\"  \n\n\nRemoved rows:\n\n3 because of duplicated id;\n3 because of no bathrooms;\n7 because of no bedrooms, no bathrooms and no basement\n\n\ndf_house[df_house$rm == 1, ]  \n\n              id            date  price bedrooms bathrooms sqft_living sqft_lot\n3951  1825069031 20140814T000000 550000        4      1.75        2410     8447\n3952  1825069031 20141016T000000 550000        4      1.75        2410     8447\n14983 6308000010 20141208T000000 585000        3      2.50        2290     5089\n14984 6308000010 20150423T000000 585000        3      2.50        2290     5089\n20054 8648900110 20140505T000000 555000        3      2.50        1940     3211\n20055 8648900110 20140826T000000 555000        3      2.50        1940     3211\n      floors waterfront view condition grade sqft_above sqft_basement yr_built\n3951       2          0    3         4     8       2060           350     1936\n3952       2          0    3         4     8       2060           350     1936\n14983      2          0    0         3     9       2290             0     2001\n14984      2          0    0         3     9       2290             0     2001\n20054      2          0    0         3     8       1940             0     2009\n20055      2          0    0         3     8       1940             0     2009\n      yr_renovated zipcode     lat     long sqft_living15 sqft_lot15   date_pro\n3951          1980   98074 47.6499 -122.088          2520      14789 2014-08-14\n3952          1980   98074 47.6499 -122.088          2520      14789 2014-10-16\n14983            0   98006 47.5443 -122.172          2290       7984 2014-12-08\n14984            0   98006 47.5443 -122.172          2290       7984 2015-04-23\n20054            0   98027 47.5644 -122.093          1880       3078 2014-05-05\n20055            0   98027 47.5644 -122.093          1880       3078 2014-08-26\n      date_Ym rm house_age date_Y is_basement\n3951  2014-08  1        78   2014           1\n3952  2014-10  1        78   2014           1\n14983 2014-12  1        13   2014           0\n14984 2015-04  1        14   2015           0\n20054 2014-05  1         5   2014           0\n20055 2014-08  1         5   2014           0\n\ndim(df_house[df_house$rm == 1, ])\n\n[1]  6 27\n\n\n\ndf_house_an <- df_house[df_house$rm == 0, c(3:14, 25, 27)]\ndim(df_house_an)\n\n[1] 21607    14\n\n\nCorrelation\n\n\n\n\n\nCorrplot"
  },
  {
    "objectID": "posts/Housing_Prices/index.html#selection-of-variable-with-reggresion",
    "href": "posts/Housing_Prices/index.html#selection-of-variable-with-reggresion",
    "title": "Regression for Housing Prices",
    "section": "3.2 Selection of variable with reggresion",
    "text": "3.2 Selection of variable with reggresion\nChecking pairs: sqft_basement + sqft_above or is_basement + sqft_living\n\nmodel_lm_1 <- lm(price ~ . - sqft_living - is_basement , data = df_house_an)\nsummary(model_lm_1)\n\n\nCall:\nlm(formula = price ~ . - sqft_living - is_basement, data = df_house_an)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1326558  -109604    -9619    89826  4231250 \n\nCoefficients:\n                Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   -9.922e+05  1.734e+04 -57.207  < 2e-16 ***\nbedrooms      -4.272e+04  2.109e+03 -20.257  < 2e-16 ***\nbathrooms      4.809e+04  3.467e+03  13.871  < 2e-16 ***\nsqft_lot      -2.604e-01  3.660e-02  -7.115 1.16e-12 ***\nfloors         2.477e+04  3.732e+03   6.637 3.29e-11 ***\nwaterfront     5.742e+05  1.861e+04  30.846  < 2e-16 ***\nview           4.510e+04  2.256e+03  19.988  < 2e-16 ***\ncondition      1.799e+04  2.463e+03   7.306 2.85e-13 ***\ngrade          1.239e+05  2.166e+03  57.215  < 2e-16 ***\nsqft_above     1.723e+02  3.510e+00  49.083  < 2e-16 ***\nsqft_basement  1.737e+02  4.611e+00  37.685  < 2e-16 ***\nhouse_age      3.639e+03  6.714e+01  54.203  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 216300 on 21595 degrees of freedom\nMultiple R-squared:  0.6532,    Adjusted R-squared:  0.653 \nF-statistic:  3698 on 11 and 21595 DF,  p-value: < 2.2e-16\n\n\n\nmodel_lm_2 <- lm(price ~ . - sqft_above  - sqft_basement , data = df_house_an)\nsummary(model_lm_2)\n\n\nCall:\nlm(formula = price ~ . - sqft_above - sqft_basement, data = df_house_an)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1328517  -109355    -9512    89502  4238727 \n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -9.935e+05  1.733e+04 -57.327  < 2e-16 ***\nbedrooms    -4.269e+04  2.109e+03 -20.243  < 2e-16 ***\nbathrooms    4.720e+04  3.494e+03  13.507  < 2e-16 ***\nsqft_living  1.722e+02  3.308e+00  52.053  < 2e-16 ***\nsqft_lot    -2.566e-01  3.654e-02  -7.021 2.27e-12 ***\nfloors       2.596e+04  3.614e+03   7.183 7.02e-13 ***\nwaterfront   5.750e+05  1.862e+04  30.885  < 2e-16 ***\nview         4.488e+04  2.239e+03  20.044  < 2e-16 ***\ncondition    1.799e+04  2.458e+03   7.320 2.57e-13 ***\ngrade        1.240e+05  2.142e+03  57.883  < 2e-16 ***\nhouse_age    3.628e+03  6.736e+01  53.856  < 2e-16 ***\nis_basement  4.978e+03  3.446e+03   1.444    0.149    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 216300 on 21595 degrees of freedom\nMultiple R-squared:  0.6533,    Adjusted R-squared:  0.6531 \nF-statistic:  3699 on 11 and 21595 DF,  p-value: < 2.2e-16\n\n\nVeryfication of AIC and BIC\n\nstats::AIC(model_lm_1, model_lm_2)\n\n           df      AIC\nmodel_lm_1 13 592186.5\nmodel_lm_2 13 592184.5\n\n\n\nstats::BIC(model_lm_1, model_lm_2)\n\n           df      BIC\nmodel_lm_1 13 592290.2\nmodel_lm_2 13 592288.2\n\n\nREMARKS better is model_lm_2 with is_basement + sqft_living however it‚Äôs a minimal lead.\nNOTE In the model_lm_2 the variable is_basement seems be not important\n\n3.2.1 Models for procedur of stepwise selection by AIC\n\nmodel_start <- lm(price ~ 1 , data = df_house_an) \nsummary(model_start)\n\n\nCall:\nlm(formula = price ~ 1, data = df_house_an)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-465082 -218582  -90082  104918 7159918 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   540082       2498   216.2   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 367200 on 21606 degrees of freedom\n\n\n\nmodel_full <- lm(price ~ . , data = df_house_an)\nsummary(model_full)\n\n\nCall:\nlm(formula = price ~ ., data = df_house_an)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1333768  -109284    -9661    89282  4247815 \n\nCoefficients: (1 not defined because of singularities)\n                Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   -9.926e+05  1.734e+04 -57.230  < 2e-16 ***\nbedrooms      -4.265e+04  2.109e+03 -20.221  < 2e-16 ***\nbathrooms      4.724e+04  3.494e+03  13.518  < 2e-16 ***\nsqft_living    1.647e+02  6.589e+00  24.993  < 2e-16 ***\nsqft_lot      -2.593e-01  3.660e-02  -7.085 1.43e-12 ***\nfloors         2.473e+04  3.732e+03   6.627 3.50e-11 ***\nwaterfront     5.748e+05  1.862e+04  30.877  < 2e-16 ***\nview           4.527e+04  2.258e+03  20.048  < 2e-16 ***\ncondition      1.827e+04  2.467e+03   7.405 1.36e-13 ***\ngrade          1.235e+05  2.179e+03  56.648  < 2e-16 ***\nsqft_above     9.555e+00  7.245e+00   1.319   0.1872    \nsqft_basement         NA         NA      NA       NA    \nhouse_age      3.628e+03  6.736e+01  53.863  < 2e-16 ***\nis_basement    1.081e+04  5.607e+03   1.928   0.0539 .  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 216300 on 21594 degrees of freedom\nMultiple R-squared:  0.6533,    Adjusted R-squared:  0.6531 \nF-statistic:  3391 on 12 and 21594 DF,  p-value: < 2.2e-16\n\n\nREMARKS NA for sqft_basement shows because of dependence with sqft_above and sqft_living However variable sqft_living has the strongest influence for price; it seems also that sqft_above and is_basement probably can be canceled.\n\n\n3.2.2 Backward stepwise model selection by AIC\n\nreg_final_b <- MASS::stepAIC(model_full, direction = \"backward\", steps = 20) \n\nStart:  AIC=530864.7\nprice ~ bedrooms + bathrooms + sqft_living + sqft_lot + floors + \n    waterfront + view + condition + grade + sqft_above + sqft_basement + \n    house_age + is_basement\n\n\nStep:  AIC=530864.7\nprice ~ bedrooms + bathrooms + sqft_living + sqft_lot + floors + \n    waterfront + view + condition + grade + sqft_above + house_age + \n    is_basement\n\n              Df  Sum of Sq        RSS    AIC\n- sqft_above   1 8.1346e+10 1.0100e+15 530864\n<none>                      1.0100e+15 530865\n- is_basement  1 1.7386e+11 1.0101e+15 530866\n- floors       1 2.0542e+12 1.0120e+15 530907\n- sqft_lot     1 2.3477e+12 1.0123e+15 530913\n- condition    1 2.5648e+12 1.0125e+15 530918\n- bathrooms    1 8.5465e+12 1.0185e+15 531045\n- view         1 1.8798e+13 1.0287e+15 531261\n- bedrooms     1 1.9124e+13 1.0291e+15 531268\n- sqft_living  1 2.9215e+13 1.0392e+15 531479\n- waterfront   1 4.4589e+13 1.0545e+15 531796\n- house_age    1 1.3569e+14 1.1456e+15 533587\n- grade        1 1.5009e+14 1.1600e+15 533856\n\nStep:  AIC=530864.5\nprice ~ bedrooms + bathrooms + sqft_living + sqft_lot + floors + \n    waterfront + view + condition + grade + house_age + is_basement\n\n              Df  Sum of Sq        RSS    AIC\n<none>                      1.0100e+15 530864\n- is_basement  1 9.7563e+10 1.0101e+15 530865\n- sqft_lot     1 2.3055e+12 1.0123e+15 530912\n- floors       1 2.4135e+12 1.0124e+15 530914\n- condition    1 2.5060e+12 1.0125e+15 530916\n- bathrooms    1 8.5326e+12 1.0186e+15 531044\n- view         1 1.8791e+13 1.0288e+15 531261\n- bedrooms     1 1.9166e+13 1.0292e+15 531269\n- waterfront   1 4.4614e+13 1.0546e+15 531796\n- sqft_living  1 1.2673e+14 1.1368e+15 533416\n- house_age    1 1.3566e+14 1.1457e+15 533585\n- grade        1 1.5671e+14 1.1667e+15 533979\n\nreg_final_b$anova\n\nStepwise Model Path \nAnalysis of Deviance Table\n\nInitial Model:\nprice ~ bedrooms + bathrooms + sqft_living + sqft_lot + floors + \n    waterfront + view + condition + grade + sqft_above + sqft_basement + \n    house_age + is_basement\n\nFinal Model:\nprice ~ bedrooms + bathrooms + sqft_living + sqft_lot + floors + \n    waterfront + view + condition + grade + house_age + is_basement\n\n             Step Df    Deviance Resid. Df   Resid. Dev      AIC\n1                                    21594 1.009951e+15 530864.7\n2 - sqft_basement  0           0     21594 1.009951e+15 530864.7\n3    - sqft_above  1 81345835722     21595 1.010032e+15 530864.5\n\n\n\n\n3.2.3 Forward stepwise model selection by AIC\n\nreg_final_f <- MASS::stepAIC(model_start, \n                             scope = list(lower = model_start, upper = model_full), \n                             direction = \"forward\") \n\nStart:  AIC=553728\nprice ~ 1\n\n                Df  Sum of Sq        RSS    AIC\n+ sqft_living    1 1.4357e+15 1.4773e+15 539060\n+ grade          1 1.2977e+15 1.6152e+15 540988\n+ sqft_above     1 1.0682e+15 1.8447e+15 543859\n+ bathrooms      1 8.0333e+14 2.1096e+15 546758\n+ view           1 4.6033e+14 2.4526e+15 550013\n+ sqft_basement  1 3.0548e+14 2.6074e+15 551336\n+ bedrooms       1 2.8987e+14 2.6230e+15 551465\n+ waterfront     1 2.0668e+14 2.7062e+15 552140\n+ floors         1 1.9211e+14 2.7208e+15 552256\n+ is_basement    1 9.4654e+13 2.8183e+15 553016\n+ sqft_lot       1 2.3420e+13 2.8895e+15 553556\n+ house_age      1 8.4793e+12 2.9044e+15 553667\n+ condition      1 3.8535e+12 2.9091e+15 553701\n<none>                        2.9129e+15 553728\n\nStep:  AIC=539059.6\nprice ~ sqft_living\n\n                Df  Sum of Sq        RSS    AIC\n+ view           1 1.2387e+14 1.3534e+15 537169\n+ grade          1 1.2135e+14 1.3559e+15 537210\n+ waterfront     1 1.1024e+14 1.3670e+15 537386\n+ house_age      1 9.3377e+13 1.3839e+15 537651\n+ bedrooms       1 4.4613e+13 1.4326e+15 538399\n+ condition      1 1.7620e+13 1.4596e+15 538802\n+ is_basement    1 4.0955e+12 1.4732e+15 539002\n+ sqft_lot       1 3.0118e+12 1.4742e+15 539017\n+ sqft_above     1 1.2173e+12 1.4760e+15 539044\n+ sqft_basement  1 1.2173e+12 1.4760e+15 539044\n+ floors         1 2.3032e+11 1.4770e+15 539058\n+ bathrooms      1 1.4867e+11 1.4771e+15 539059\n<none>                        1.4773e+15 539060\n\nStep:  AIC=537169.3\nprice ~ sqft_living + view\n\n                Df  Sum of Sq        RSS    AIC\n+ grade          1 1.0849e+14 1.2449e+15 535366\n+ house_age      1 6.4055e+13 1.2893e+15 536124\n+ waterfront     1 4.4642e+13 1.3087e+15 536447\n+ bedrooms       1 2.9879e+13 1.3235e+15 536689\n+ condition      1 1.2104e+13 1.3413e+15 536977\n+ sqft_lot       1 4.1530e+12 1.3492e+15 537105\n+ floors         1 1.8840e+12 1.3515e+15 537141\n+ sqft_above     1 7.8523e+11 1.3526e+15 537159\n+ sqft_basement  1 7.8523e+11 1.3526e+15 537159\n+ is_basement    1 3.2101e+11 1.3531e+15 537166\n<none>                        1.3534e+15 537169\n+ bathrooms      1 7.8770e+09 1.3534e+15 537171\n\nStep:  AIC=535365.8\nprice ~ sqft_living + view + grade\n\n                Df  Sum of Sq        RSS    AIC\n+ house_age      1 1.5349e+14 1.0914e+15 532525\n+ waterfront     1 4.7115e+13 1.1978e+15 534534\n+ condition      1 2.7028e+13 1.2179e+15 534894\n+ bedrooms       1 1.5032e+13 1.2299e+15 535105\n+ is_basement    1 5.8040e+12 1.2391e+15 535267\n+ sqft_above     1 5.2620e+12 1.2396e+15 535276\n+ sqft_basement  1 5.2620e+12 1.2396e+15 535276\n+ bathrooms      1 4.7750e+12 1.2401e+15 535285\n+ floors         1 4.1365e+12 1.2408e+15 535296\n+ sqft_lot       1 2.9774e+12 1.2419e+15 535316\n<none>                        1.2449e+15 535366\n\nStep:  AIC=532524.7\nprice ~ sqft_living + view + grade + house_age\n\n                Df  Sum of Sq        RSS    AIC\n+ waterfront     1 4.8030e+13 1.0434e+15 531554\n+ bedrooms       1 1.5249e+13 1.0762e+15 532223\n+ bathrooms      1 7.8240e+12 1.0836e+15 532371\n+ floors         1 5.8689e+12 1.0855e+15 532410\n+ sqft_lot       1 2.4312e+12 1.0890e+15 532478\n+ condition      1 1.5337e+12 1.0899e+15 532496\n+ sqft_above     1 1.7884e+11 1.0912e+15 532523\n+ sqft_basement  1 1.7884e+11 1.0912e+15 532523\n<none>                        1.0914e+15 532525\n+ is_basement    1 4.3415e+09 1.0914e+15 532527\n\nStep:  AIC=531554.2\nprice ~ sqft_living + view + grade + house_age + waterfront\n\n                Df  Sum of Sq        RSS    AIC\n+ bedrooms       1 1.2782e+13 1.0306e+15 531290\n+ bathrooms      1 8.0199e+12 1.0354e+15 531389\n+ floors         1 5.0535e+12 1.0383e+15 531451\n+ sqft_lot       1 2.2603e+12 1.0411e+15 531509\n+ condition      1 1.6053e+12 1.0418e+15 531523\n+ is_basement    1 1.2593e+11 1.0432e+15 531554\n<none>                        1.0434e+15 531554\n+ sqft_above     1 2.2002e+10 1.0434e+15 531556\n+ sqft_basement  1 2.2002e+10 1.0434e+15 531556\n\nStep:  AIC=531289.9\nprice ~ sqft_living + view + grade + house_age + waterfront + \n    bedrooms\n\n                Df  Sum of Sq        RSS    AIC\n+ bathrooms      1 1.3442e+13 1.0171e+15 531008\n+ floors         1 5.1422e+12 1.0254e+15 531184\n+ sqft_lot       1 3.3768e+12 1.0272e+15 531221\n+ condition      1 2.2213e+12 1.0284e+15 531245\n+ is_basement    1 2.6533e+11 1.0303e+15 531286\n<none>                        1.0306e+15 531290\n+ sqft_above     1 7.3297e+08 1.0306e+15 531292\n+ sqft_basement  1 7.3297e+08 1.0306e+15 531292\n\nStep:  AIC=531008.2\nprice ~ sqft_living + view + grade + house_age + waterfront + \n    bedrooms + bathrooms\n\n                Df  Sum of Sq        RSS    AIC\n+ sqft_lot       1 2.7103e+12 1.0144e+15 530953\n+ floors         1 2.0646e+12 1.0151e+15 530966\n+ condition      1 1.9267e+12 1.0152e+15 530969\n<none>                        1.0171e+15 531008\n+ sqft_above     1 6.6997e+10 1.0171e+15 531009\n+ sqft_basement  1 6.6997e+10 1.0171e+15 531009\n+ is_basement    1 4.3506e+06 1.0171e+15 531010\n\nStep:  AIC=530952.6\nprice ~ sqft_living + view + grade + house_age + waterfront + \n    bedrooms + bathrooms + sqft_lot\n\n                Df  Sum of Sq        RSS    AIC\n+ condition      1 1.9544e+12 1.0125e+15 530913\n+ floors         1 1.7885e+12 1.0127e+15 530916\n+ sqft_above     1 1.5101e+11 1.0143e+15 530951\n+ sqft_basement  1 1.5101e+11 1.0143e+15 530951\n<none>                        1.0144e+15 530953\n+ is_basement    1 1.4130e+10 1.0144e+15 530954\n\nStep:  AIC=530912.9\nprice ~ sqft_living + view + grade + house_age + waterfront + \n    bedrooms + bathrooms + sqft_lot + condition\n\n                Df  Sum of Sq        RSS    AIC\n+ floors         1 2.3556e+12 1.0101e+15 530865\n+ sqft_above     1 3.0044e+11 1.0122e+15 530908\n+ sqft_basement  1 3.0044e+11 1.0122e+15 530908\n<none>                        1.0125e+15 530913\n+ is_basement    1 3.9624e+10 1.0124e+15 530914\n\nStep:  AIC=530864.6\nprice ~ sqft_living + view + grade + house_age + waterfront + \n    bedrooms + bathrooms + sqft_lot + condition + floors\n\n                Df  Sum of Sq        RSS    AIC\n+ is_basement    1 9.7563e+10 1.0100e+15 530864\n<none>                        1.0101e+15 530865\n+ sqft_above     1 5.0523e+09 1.0101e+15 530866\n+ sqft_basement  1 5.0523e+09 1.0101e+15 530866\n\nStep:  AIC=530864.5\nprice ~ sqft_living + view + grade + house_age + waterfront + \n    bedrooms + bathrooms + sqft_lot + condition + floors + is_basement\n\n                Df  Sum of Sq      RSS    AIC\n<none>                        1.01e+15 530864\n+ sqft_above     1 8.1346e+10 1.01e+15 530865\n+ sqft_basement  1 8.1346e+10 1.01e+15 530865\n\nreg_final_f$anova\n\nStepwise Model Path \nAnalysis of Deviance Table\n\nInitial Model:\nprice ~ 1\n\nFinal Model:\nprice ~ sqft_living + view + grade + house_age + waterfront + \n    bedrooms + bathrooms + sqft_lot + condition + floors + is_basement\n\n            Step Df     Deviance Resid. Df   Resid. Dev      AIC\n1                                    21606 2.912912e+15 553728.0\n2  + sqft_living  1 1.435656e+15     21605 1.477256e+15 539059.5\n3         + view  1 1.238704e+14     21604 1.353386e+15 537169.3\n4        + grade  1 1.084894e+14     21603 1.244897e+15 535365.9\n5    + house_age  1 1.534924e+14     21602 1.091404e+15 532524.6\n6   + waterfront  1 4.802981e+13     21601 1.043374e+15 531554.2\n7     + bedrooms  1 1.278247e+13     21600 1.030592e+15 531289.9\n8    + bathrooms  1 1.344191e+13     21599 1.017150e+15 531008.2\n9     + sqft_lot  1 2.710334e+12     21598 1.014440e+15 530952.6\n10   + condition  1 1.954398e+12     21597 1.012485e+15 530912.9\n11      + floors  1 2.355552e+12     21596 1.010130e+15 530864.6\n12 + is_basement  1 9.756264e+10     21595 1.010032e+15 530864.5\n\n\n\n\n3.2.4 Both direction stepwise model selection by AIC\n\nreg_final_b <- MASS::stepAIC(model_start, \n                             scope = list(lower = model_start, upper = model_full),\n                             direction = \"both\")\n\nStart:  AIC=553728\nprice ~ 1\n\n                Df  Sum of Sq        RSS    AIC\n+ sqft_living    1 1.4357e+15 1.4773e+15 539060\n+ grade          1 1.2977e+15 1.6152e+15 540988\n+ sqft_above     1 1.0682e+15 1.8447e+15 543859\n+ bathrooms      1 8.0333e+14 2.1096e+15 546758\n+ view           1 4.6033e+14 2.4526e+15 550013\n+ sqft_basement  1 3.0548e+14 2.6074e+15 551336\n+ bedrooms       1 2.8987e+14 2.6230e+15 551465\n+ waterfront     1 2.0668e+14 2.7062e+15 552140\n+ floors         1 1.9211e+14 2.7208e+15 552256\n+ is_basement    1 9.4654e+13 2.8183e+15 553016\n+ sqft_lot       1 2.3420e+13 2.8895e+15 553556\n+ house_age      1 8.4793e+12 2.9044e+15 553667\n+ condition      1 3.8535e+12 2.9091e+15 553701\n<none>                        2.9129e+15 553728\n\nStep:  AIC=539059.6\nprice ~ sqft_living\n\n                Df  Sum of Sq        RSS    AIC\n+ view           1 1.2387e+14 1.3534e+15 537169\n+ grade          1 1.2135e+14 1.3559e+15 537210\n+ waterfront     1 1.1024e+14 1.3670e+15 537386\n+ house_age      1 9.3377e+13 1.3839e+15 537651\n+ bedrooms       1 4.4613e+13 1.4326e+15 538399\n+ condition      1 1.7620e+13 1.4596e+15 538802\n+ is_basement    1 4.0955e+12 1.4732e+15 539002\n+ sqft_lot       1 3.0118e+12 1.4742e+15 539017\n+ sqft_above     1 1.2173e+12 1.4760e+15 539044\n+ sqft_basement  1 1.2173e+12 1.4760e+15 539044\n+ floors         1 2.3032e+11 1.4770e+15 539058\n+ bathrooms      1 1.4867e+11 1.4771e+15 539059\n<none>                        1.4773e+15 539060\n- sqft_living    1 1.4357e+15 2.9129e+15 553728\n\nStep:  AIC=537169.3\nprice ~ sqft_living + view\n\n                Df  Sum of Sq        RSS    AIC\n+ grade          1 1.0849e+14 1.2449e+15 535366\n+ house_age      1 6.4055e+13 1.2893e+15 536124\n+ waterfront     1 4.4642e+13 1.3087e+15 536447\n+ bedrooms       1 2.9879e+13 1.3235e+15 536689\n+ condition      1 1.2104e+13 1.3413e+15 536977\n+ sqft_lot       1 4.1530e+12 1.3492e+15 537105\n+ floors         1 1.8840e+12 1.3515e+15 537141\n+ sqft_above     1 7.8523e+11 1.3526e+15 537159\n+ sqft_basement  1 7.8523e+11 1.3526e+15 537159\n+ is_basement    1 3.2101e+11 1.3531e+15 537166\n<none>                        1.3534e+15 537169\n+ bathrooms      1 7.8770e+09 1.3534e+15 537171\n- view           1 1.2387e+14 1.4773e+15 539060\n- sqft_living    1 1.0992e+15 2.4526e+15 550013\n\nStep:  AIC=535365.8\nprice ~ sqft_living + view + grade\n\n                Df  Sum of Sq        RSS    AIC\n+ house_age      1 1.5349e+14 1.0914e+15 532525\n+ waterfront     1 4.7115e+13 1.1978e+15 534534\n+ condition      1 2.7028e+13 1.2179e+15 534894\n+ bedrooms       1 1.5032e+13 1.2299e+15 535105\n+ is_basement    1 5.8040e+12 1.2391e+15 535267\n+ sqft_above     1 5.2620e+12 1.2396e+15 535276\n+ sqft_basement  1 5.2620e+12 1.2396e+15 535276\n+ bathrooms      1 4.7750e+12 1.2401e+15 535285\n+ floors         1 4.1365e+12 1.2408e+15 535296\n+ sqft_lot       1 2.9774e+12 1.2419e+15 535316\n<none>                        1.2449e+15 535366\n- grade          1 1.0849e+14 1.3534e+15 537169\n- view           1 1.1101e+14 1.3559e+15 537210\n- sqft_living    1 2.0621e+14 1.4511e+15 538676\n\nStep:  AIC=532524.7\nprice ~ sqft_living + view + grade + house_age\n\n                Df  Sum of Sq        RSS    AIC\n+ waterfront     1 4.8030e+13 1.0434e+15 531554\n+ bedrooms       1 1.5249e+13 1.0762e+15 532223\n+ bathrooms      1 7.8240e+12 1.0836e+15 532371\n+ floors         1 5.8689e+12 1.0855e+15 532410\n+ sqft_lot       1 2.4312e+12 1.0890e+15 532478\n+ condition      1 1.5337e+12 1.0899e+15 532496\n+ sqft_above     1 1.7884e+11 1.0912e+15 532523\n+ sqft_basement  1 1.7884e+11 1.0912e+15 532523\n<none>                        1.0914e+15 532525\n+ is_basement    1 4.3415e+09 1.0914e+15 532527\n- view           1 6.4390e+13 1.1558e+15 533761\n- house_age      1 1.5349e+14 1.2449e+15 535366\n- grade          1 1.9793e+14 1.2893e+15 536124\n- sqft_living    1 2.0224e+14 1.2936e+15 536196\n\nStep:  AIC=531554.2\nprice ~ sqft_living + view + grade + house_age + waterfront\n\n                Df  Sum of Sq        RSS    AIC\n+ bedrooms       1 1.2782e+13 1.0306e+15 531290\n+ bathrooms      1 8.0199e+12 1.0354e+15 531389\n+ floors         1 5.0535e+12 1.0383e+15 531451\n+ sqft_lot       1 2.2603e+12 1.0411e+15 531509\n+ condition      1 1.6053e+12 1.0418e+15 531523\n+ is_basement    1 1.2593e+11 1.0432e+15 531554\n<none>                        1.0434e+15 531554\n+ sqft_above     1 2.2002e+10 1.0434e+15 531556\n+ sqft_basement  1 2.2002e+10 1.0434e+15 531556\n- view           1 2.2353e+13 1.0657e+15 532010\n- waterfront     1 4.8030e+13 1.0914e+15 532525\n- house_age      1 1.5441e+14 1.1978e+15 534534\n- sqft_living    1 2.0126e+14 1.2446e+15 535363\n- grade          1 2.0143e+14 1.2448e+15 535366\n\nStep:  AIC=531289.9\nprice ~ sqft_living + view + grade + house_age + waterfront + \n    bedrooms\n\n                Df  Sum of Sq        RSS    AIC\n+ bathrooms      1 1.3442e+13 1.0171e+15 531008\n+ floors         1 5.1422e+12 1.0254e+15 531184\n+ sqft_lot       1 3.3768e+12 1.0272e+15 531221\n+ condition      1 2.2213e+12 1.0284e+15 531245\n+ is_basement    1 2.6533e+11 1.0303e+15 531286\n<none>                        1.0306e+15 531290\n+ sqft_above     1 7.3297e+08 1.0306e+15 531292\n+ sqft_basement  1 7.3297e+08 1.0306e+15 531292\n- bedrooms       1 1.2782e+13 1.0434e+15 531554\n- view           1 1.9700e+13 1.0503e+15 531697\n- waterfront     1 4.5563e+13 1.0762e+15 532223\n- house_age      1 1.5458e+14 1.1852e+15 534308\n- grade          1 1.8246e+14 1.2131e+15 534810\n- sqft_living    1 1.9443e+14 1.2250e+15 535022\n\nStep:  AIC=531008.2\nprice ~ sqft_living + view + grade + house_age + waterfront + \n    bedrooms + bathrooms\n\n                Df  Sum of Sq        RSS    AIC\n+ sqft_lot       1 2.7103e+12 1.0144e+15 530953\n+ floors         1 2.0646e+12 1.0151e+15 530966\n+ condition      1 1.9267e+12 1.0152e+15 530969\n<none>                        1.0171e+15 531008\n+ sqft_above     1 6.6997e+10 1.0171e+15 531009\n+ sqft_basement  1 6.6997e+10 1.0171e+15 531009\n+ is_basement    1 4.3506e+06 1.0171e+15 531010\n- bathrooms      1 1.3442e+13 1.0306e+15 531290\n- bedrooms       1 1.8205e+13 1.0354e+15 531389\n- view           1 1.8509e+13 1.0357e+15 531396\n- waterfront     1 4.5303e+13 1.0625e+15 531948\n- sqft_living    1 1.2478e+14 1.1419e+15 533507\n- house_age      1 1.6575e+14 1.1829e+15 534268\n- grade          1 1.6968e+14 1.1868e+15 534340\n\nStep:  AIC=530952.6\nprice ~ sqft_living + view + grade + house_age + waterfront + \n    bedrooms + bathrooms + sqft_lot\n\n                Df  Sum of Sq        RSS    AIC\n+ condition      1 1.9544e+12 1.0125e+15 530913\n+ floors         1 1.7885e+12 1.0127e+15 530916\n+ sqft_above     1 1.5101e+11 1.0143e+15 530951\n+ sqft_basement  1 1.5101e+11 1.0143e+15 530951\n<none>                        1.0144e+15 530953\n+ is_basement    1 1.4130e+10 1.0144e+15 530954\n- sqft_lot       1 2.7103e+12 1.0171e+15 531008\n- bathrooms      1 1.2775e+13 1.0272e+15 531221\n- view           1 1.8872e+13 1.0333e+15 531349\n- bedrooms       1 1.9207e+13 1.0336e+15 531356\n- waterfront     1 4.5025e+13 1.0595e+15 531889\n- sqft_living    1 1.2745e+14 1.1419e+15 533508\n- house_age      1 1.6417e+14 1.1786e+15 534192\n- grade          1 1.6768e+14 1.1821e+15 534256\n\nStep:  AIC=530912.9\nprice ~ sqft_living + view + grade + house_age + waterfront + \n    bedrooms + bathrooms + sqft_lot + condition\n\n                Df  Sum of Sq        RSS    AIC\n+ floors         1 2.3556e+12 1.0101e+15 530865\n+ sqft_above     1 3.0044e+11 1.0122e+15 530908\n+ sqft_basement  1 3.0044e+11 1.0122e+15 530908\n<none>                        1.0125e+15 530913\n+ is_basement    1 3.9624e+10 1.0124e+15 530914\n- condition      1 1.9544e+12 1.0144e+15 530953\n- sqft_lot       1 2.7380e+12 1.0152e+15 530969\n- bathrooms      1 1.2484e+13 1.0250e+15 531176\n- view           1 1.8654e+13 1.0311e+15 531305\n- bedrooms       1 1.9826e+13 1.0323e+15 531330\n- waterfront     1 4.5048e+13 1.0575e+15 531851\n- sqft_living    1 1.2708e+14 1.1396e+15 533466\n- house_age      1 1.3783e+14 1.1503e+15 533668\n- grade          1 1.6870e+14 1.1812e+15 534241\n\nStep:  AIC=530864.6\nprice ~ sqft_living + view + grade + house_age + waterfront + \n    bedrooms + bathrooms + sqft_lot + condition + floors\n\n                Df  Sum of Sq        RSS    AIC\n+ is_basement    1 9.7563e+10 1.0100e+15 530864\n<none>                        1.0101e+15 530865\n+ sqft_above     1 5.0523e+09 1.0101e+15 530866\n+ sqft_basement  1 5.0523e+09 1.0101e+15 530866\n- floors         1 2.3556e+12 1.0125e+15 530913\n- sqft_lot       1 2.4234e+12 1.0126e+15 530914\n- condition      1 2.5215e+12 1.0127e+15 530916\n- bathrooms      1 9.3698e+12 1.0195e+15 531062\n- bedrooms       1 1.9193e+13 1.0293e+15 531269\n- view           1 1.9288e+13 1.0294e+15 531271\n- waterfront     1 4.4522e+13 1.0547e+15 531795\n- sqft_living    1 1.2887e+14 1.1390e+15 533457\n- house_age      1 1.3945e+14 1.1496e+15 533657\n- grade          1 1.5677e+14 1.1669e+15 533980\n\nStep:  AIC=530864.5\nprice ~ sqft_living + view + grade + house_age + waterfront + \n    bedrooms + bathrooms + sqft_lot + condition + floors + is_basement\n\n                Df  Sum of Sq        RSS    AIC\n<none>                        1.0100e+15 530864\n- is_basement    1 9.7563e+10 1.0101e+15 530865\n+ sqft_above     1 8.1346e+10 1.0100e+15 530865\n+ sqft_basement  1 8.1346e+10 1.0100e+15 530865\n- sqft_lot       1 2.3055e+12 1.0123e+15 530912\n- floors         1 2.4135e+12 1.0124e+15 530914\n- condition      1 2.5060e+12 1.0125e+15 530916\n- bathrooms      1 8.5326e+12 1.0186e+15 531044\n- view           1 1.8791e+13 1.0288e+15 531261\n- bedrooms       1 1.9166e+13 1.0292e+15 531269\n- waterfront     1 4.4614e+13 1.0546e+15 531796\n- sqft_living    1 1.2673e+14 1.1368e+15 533416\n- house_age      1 1.3566e+14 1.1457e+15 533585\n- grade          1 1.5671e+14 1.1667e+15 533979\n\nreg_final_b$anova\n\nStepwise Model Path \nAnalysis of Deviance Table\n\nInitial Model:\nprice ~ 1\n\nFinal Model:\nprice ~ sqft_living + view + grade + house_age + waterfront + \n    bedrooms + bathrooms + sqft_lot + condition + floors + is_basement\n\n            Step Df     Deviance Resid. Df   Resid. Dev      AIC\n1                                    21606 2.912912e+15 553728.0\n2  + sqft_living  1 1.435656e+15     21605 1.477256e+15 539059.5\n3         + view  1 1.238704e+14     21604 1.353386e+15 537169.3\n4        + grade  1 1.084894e+14     21603 1.244897e+15 535365.9\n5    + house_age  1 1.534924e+14     21602 1.091404e+15 532524.6\n6   + waterfront  1 4.802981e+13     21601 1.043374e+15 531554.2\n7     + bedrooms  1 1.278247e+13     21600 1.030592e+15 531289.9\n8    + bathrooms  1 1.344191e+13     21599 1.017150e+15 531008.2\n9     + sqft_lot  1 2.710334e+12     21598 1.014440e+15 530952.6\n10   + condition  1 1.954398e+12     21597 1.012485e+15 530912.9\n11      + floors  1 2.355552e+12     21596 1.010130e+15 530864.6\n12 + is_basement  1 9.756264e+10     21595 1.010032e+15 530864.5"
  },
  {
    "objectID": "posts/Housing_Prices/index.html#final-dataset-1",
    "href": "posts/Housing_Prices/index.html#final-dataset-1",
    "title": "Regression for Housing Prices",
    "section": "3.3 Final dataset",
    "text": "3.3 Final dataset\n\ndf_house_fin <- df_house_an[ , c(1:10, 13:14)]\ndim(df_house_fin)\n\n[1] 21607    12\n\ncolnames(df_house_fin)\n\n [1] \"price\"       \"bedrooms\"    \"bathrooms\"   \"sqft_living\" \"sqft_lot\"   \n [6] \"floors\"      \"waterfront\"  \"view\"        \"condition\"   \"grade\"      \n[11] \"house_age\"   \"is_basement\"\n\n\n\n\n\n\n\nCorrplot\n\n\n\n\nLast check of final detaset\n\nanova(lm(price ~ . , data = df_house_fin))\n\nAnalysis of Variance Table\n\nResponse: price\n               Df     Sum Sq    Mean Sq    F value Pr(>F)    \nbedrooms        1 2.8987e+14 2.8987e+14  6197.5337 <2e-16 ***\nbathrooms       1 5.1915e+14 5.1915e+14 11099.7430 <2e-16 ***\nsqft_living     1 6.7170e+14 6.7170e+14 14361.1814 <2e-16 ***\nsqft_lot        1 5.2711e+12 5.2711e+12   112.6998 <2e-16 ***\nfloors          1 2.9519e+10 2.9519e+10     0.6311 0.4269    \nwaterfront      1 9.9288e+13 9.9288e+13  2122.8260 <2e-16 ***\nview            1 5.2522e+13 5.2522e+13  1122.9473 <2e-16 ***\ncondition       1 1.8766e+13 1.8766e+13   401.2202 <2e-16 ***\ngrade           1 1.0674e+14 1.0674e+14  2282.1857 <2e-16 ***\nhouse_age       1 1.3945e+14 1.3945e+14  2981.4844 <2e-16 ***\nis_basement     1 9.7563e+10 9.7563e+10     2.0859 0.1487    \nResiduals   21595 1.0100e+15 4.6772e+10                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nNOTE According to the analysis-of-variance for the final data probably it should be also considered model without variables floors and is_basement"
  },
  {
    "objectID": "posts/Housing_Prices/index.html#train-test-split",
    "href": "posts/Housing_Prices/index.html#train-test-split",
    "title": "Regression for Housing Prices",
    "section": "3.4 Train-test split",
    "text": "3.4 Train-test split\n\nsplit_house <- sample.split(df_house_fin, SplitRatio = 0.8)\n\nTrain set\n\ntrain_house <- subset(df_house_fin, split_house == TRUE)\ndim(train_house)\n\n[1] 16205    12\n\n\nTest set\n\ntest_house <- subset(df_house_fin, split_house == FALSE)\ndim(test_house) \n\n[1] 5402   12"
  },
  {
    "objectID": "posts/Housing_Prices/index.html#model",
    "href": "posts/Housing_Prices/index.html#model",
    "title": "Regression for Housing Prices",
    "section": "4.1 Model",
    "text": "4.1 Model\n\nmodel_lm <- lm(formula = price ~ . , data = train_house)\n\n\nsummary(model_lm)\n\n\nCall:\nlm(formula = price ~ ., data = train_house)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1328416  -110004   -10465    90069  4204941 \n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -1.000e+06  2.047e+04 -48.872  < 2e-16 ***\nbedrooms    -4.395e+04  2.466e+03 -17.820  < 2e-16 ***\nbathrooms    4.737e+04  4.109e+03  11.530  < 2e-16 ***\nsqft_living  1.750e+02  3.894e+00  44.937  < 2e-16 ***\nsqft_lot    -2.728e-01  4.343e-02  -6.281 3.46e-10 ***\nfloors       2.639e+04  4.261e+03   6.192 6.07e-10 ***\nwaterfront   5.639e+05  2.157e+04  26.149  < 2e-16 ***\nview         4.622e+04  2.641e+03  17.497  < 2e-16 ***\ncondition    1.827e+04  2.879e+03   6.344 2.30e-10 ***\ngrade        1.239e+05  2.522e+03  49.117  < 2e-16 ***\nhouse_age    3.697e+03  7.918e+01  46.690  < 2e-16 ***\nis_basement  6.175e+03  4.048e+03   1.526    0.127    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 220400 on 16193 degrees of freedom\nMultiple R-squared:  0.6483,    Adjusted R-squared:  0.6481 \nF-statistic:  2714 on 11 and 16193 DF,  p-value: < 2.2e-16\n\nsummary(model_lm)$adj.r.squared \n\n[1] 0.6480762"
  },
  {
    "objectID": "posts/Housing_Prices/index.html#prediction",
    "href": "posts/Housing_Prices/index.html#prediction",
    "title": "Regression for Housing Prices",
    "section": "4.2 Prediction",
    "text": "4.2 Prediction\n\ntest set\n\n\ny_pred_lm <- predict(model_lm, newdata = test_house)\nres_lm <- test_house$price - y_pred_lm\n\nsummary(y_pred_lm)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n-338370  338645  477525  541408  678207 2666131 \n\nlength(y_pred_lm[y_pred_lm <= 0]) \n\n[1] 12\n\n\n\ntrain set\n\n\ny_pred_lm_0 <- predict(model_lm, newdata = train_house)\nres_lm_0 <- train_house$price - y_pred_lm_0\n\nsummary(y_pred_lm_0)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n-598167  336436  478586  539009  669794 3495059 \n\nlength(y_pred_lm_0[y_pred_lm_0 <= 0])\n\n[1] 34\n\n\nNOTE model is giving value of price less then 0\n\nsummary(test_house$price)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  81000  325000  455000  543299  650000 4500000"
  },
  {
    "objectID": "posts/Housing_Prices/index.html#models-test",
    "href": "posts/Housing_Prices/index.html#models-test",
    "title": "Regression for Housing Prices",
    "section": "4.3 Model‚Äôs test",
    "text": "4.3 Model‚Äôs test\nSufficiency of the functional part of the model: scatter plots of residuals versus predictors\n\nplot_res_pred(res_lm ~ y_pred_lm, res_lm_0 ~ y_pred_lm_0)\n\n\n\n\nMultiple Linear Regression: Residuals vs.¬†predictors and real\n\n\n\n\nNormality of errors\n\ntest set\n\n\nsummary(res_lm)\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-1116151  -107134    -3504     1891    92919  2140034 \n\n\n\nplot_boxplot(tab_src = res_lm)\n\n\n\n\nMultiple Linear Regression - residuals\n\n\n\n\n\nplot_hist(res_lm, breaks = 100)\n\n\n\n\nMultiple Linear Regression: Histogram of residual (test)\n\n\n\n\n\ntseries::jarque.bera.test(res_lm) \n\n\n    Jarque Bera Test\n\ndata:  res_lm\nX-squared = 42219, df = 2, p-value < 2.2e-16\n\n\n Outcome Residuals don‚Äôt have a normal distribution\n\nplot_train_test(res_lm, res_lm_0, y_pred_lm, test_house$price)\n\n\n\n\nQQplot - Multiple Linear Regression (train & test set)\n\n\n\n\n\ntrain set\n\n\nsummary(res_lm_0)\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-1328416  -110004   -10465        0    90069  4204941 \n\n\n\nplot_boxplot(res_lm_0)\n\n\n\n\nMultiple Linear Regression - residuals\n\n\n\n\n\nplot_hist(res_lm_0, breaks = 100)\n\n\n\n\nMultiple Linear Regression: Histogram of residual (train)\n\n\n\n\n\ntseries::jarque.bera.test(res_lm_0) \n\n\n    Jarque Bera Test\n\ndata:  res_lm_0\nX-squared = 1033053, df = 2, p-value < 2.2e-16\n\n\nOutcome Residuals don‚Äôt have a normal distribution\n\nplot_train_test(res_lm_0, res_lm_0, y_pred_lm_0, test_house$price)\n\n\n\n\nQQplot - Multiple Linear Regression (train & test set)"
  },
  {
    "objectID": "posts/Housing_Prices/index.html#model-1",
    "href": "posts/Housing_Prices/index.html#model-1",
    "title": "Regression for Housing Prices",
    "section": "5.1 Model",
    "text": "5.1 Model\n\nmodel_svr <- svm(formula = price ~ . , data = train_house,\n                 type = \"eps-regression\", kernel = \"radial\")\nsummary(model_svr)\n\n\nCall:\nsvm(formula = price ~ ., data = train_house, type = \"eps-regression\", \n    kernel = \"radial\")\n\n\nParameters:\n   SVM-Type:  eps-regression \n SVM-Kernel:  radial \n       cost:  1 \n      gamma:  0.09090909 \n    epsilon:  0.1 \n\n\nNumber of Support Vectors:  12493"
  },
  {
    "objectID": "posts/Housing_Prices/index.html#prediction-1",
    "href": "posts/Housing_Prices/index.html#prediction-1",
    "title": "Regression for Housing Prices",
    "section": "5.2 Prediction",
    "text": "5.2 Prediction\n\ntest set\n\n\ny_pred_svr <- predict(model_svr, newdata = test_house)\nres_svr <- test_house$price - y_pred_svr\n\nsummary(y_pred_lm)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n-338370  338645  477525  541408  678207 2666131 \n\n\n\ntrain set\n\n\ny_pred_svr_0 <- predict(model_svr, newdata = train_house)\nres_svr_0 <- train_house$price - y_pred_svr_0"
  },
  {
    "objectID": "posts/Housing_Prices/index.html#models-test-1",
    "href": "posts/Housing_Prices/index.html#models-test-1",
    "title": "Regression for Housing Prices",
    "section": "5.3 Model‚Äôs test",
    "text": "5.3 Model‚Äôs test\nSufficiency of the functional part of the model: scatter plots of residuals versus predictors\n\n# par(mfcol = c(1, 2), mar = c(5.1, 5.1, 2.1, 2.1))\nplot_res_pred(res_svr ~ y_pred_svr, res_svr_0 ~ y_pred_svr_0)\n\n\n\n\nSVR: Residuals vs.¬†predictors and real\n\n\n\n\nNormality of errors\n\ntest set\n\n\nsummary(res_svr)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n-829225  -79873    3168   20051   91456 2192822 \n\n\n\nplot_boxplot(res_svr)\n\n\n\n\nSVR - residuals\n\n\n\n\n\nplot_hist(res_svr, breaks = 100)\n\n\n\n\nSVR: Histogram of residual (test)\n\n\n\n\n\ntseries::jarque.bera.test(res_svr) \n\n\n    Jarque Bera Test\n\ndata:  res_svr\nX-squared = 70815, df = 2, p-value < 2.2e-16\n\n\n Outcome Residuals don‚Äôt have a normal distribution\n\nplot_train_test(res_svr, res_svr_0, y_pred_svr, test_house$price)\n\n\n\n\nQQplot - SVR (train & test set)\n\n\n\n\n\ntrain set\n\n\nsummary(res_svr_0)\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-1281368   -74057    -2376    19686    83774  6270785 \n\n\n\nplot_boxplot(res_svr_0)\n\n\n\n\nSVR - residuals\n\n\n\n\n\nplot_hist(res_svr_0, breaks = 100)\n\n\n\n\nSVR: Histogram of residual (train)\n\n\n\n\n\ntseries::jarque.bera.test(res_svr_0) \n\n\n    Jarque Bera Test\n\ndata:  res_svr_0\nX-squared = 13967661, df = 2, p-value < 2.2e-16\n\n\nOutcome Residuals don‚Äôt have a normal distribution\n\nplot_train_test(res_svr_0, res_svr_0, y_pred_svr_0, test_house$price)\n\n\n\n\nQQplot - SVR (train & test set)"
  },
  {
    "objectID": "posts/Housing_Prices/index.html#model-2",
    "href": "posts/Housing_Prices/index.html#model-2",
    "title": "Regression for Housing Prices",
    "section": "6.1 Model",
    "text": "6.1 Model\n\nmodel_rf <- randomForest(x = train_house[-1], y = train_house$price, ntree = 100)\nprint(model_rf)\n\n\nCall:\n randomForest(x = train_house[-1], y = train_house$price, ntree = 100) \n               Type of random forest: regression\n                     Number of trees: 100\nNo. of variables tried at each split: 3\n\n          Mean of squared residuals: 37856957976\n                    % Var explained: 72.57\n\nmodel_rf$mse[which.max(model_rf$rsq)] \n\n[1] 37856957976"
  },
  {
    "objectID": "posts/Housing_Prices/index.html#prediction-2",
    "href": "posts/Housing_Prices/index.html#prediction-2",
    "title": "Regression for Housing Prices",
    "section": "6.2 Prediction",
    "text": "6.2 Prediction\n\ntest set\n\n\ny_pred_rf <- predict(model_rf, newdata = test_house)\nres_rf <- test_house$price - y_pred_rf\n\nsummary(y_pred_rf)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 169106  358936  455085  541829  612970 4667255 \n\n\n\ntrain set\n\n\ny_pred_rf_0 <- predict(model_rf, newdata = train_house)\nres_rf_0 <- train_house$price - y_pred_rf_0\n\nsummary(y_pred_rf_0)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 150243  351059  454109  538875  613455 6237078"
  },
  {
    "objectID": "posts/Housing_Prices/index.html#models-test-2",
    "href": "posts/Housing_Prices/index.html#models-test-2",
    "title": "Regression for Housing Prices",
    "section": "6.3 Model‚Äôs test",
    "text": "6.3 Model‚Äôs test\nSufficiency of the functional part of the model: scatter plots of residuals versus predictors\n\nplot_res_pred(res_rf ~ y_pred_rf, res_rf_0 ~ y_pred_rf_0)\n\n\n\n\nRandom Forest: Residuals vs.¬†predictors and real\n\n\n\n\nNormality of errors\n\ntest set\n\n\nsummary(res_rf)\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-1779255   -90389   -11216     1470    75860  1683609 \n\n\n\nplot_boxplot(res_rf)\n\n\n\n\nRandom Forest - residuals\n\n\n\n\n\nplot_hist(res_rf, breaks = 100)\n\n\n\n\nRandom Forest: Histogram of residual (test)\n\n\n\n\n\ntseries::jarque.bera.test(res_rf) \n\n\n    Jarque Bera Test\n\ndata:  res_rf\nX-squared = 37865, df = 2, p-value < 2.2e-16\n\n\n Outcome Residuals don‚Äôt have a normal distribution\n\nplot_train_test(res_rf, res_rf_0, y_pred_rf, test_house$price)\n\n\n\n\nQQplot - Random Forest (train & test set)\n\n\n\n\n\ntrain set\n\n\nsummary(res_rf_0)\n\n      Min.    1st Qu.     Median       Mean    3rd Qu.       Max. \n-1711235.6   -59359.4   -10137.5      134.2    46760.1  1816076.1 \n\n\n\nplot_boxplot(res_rf_0)\n\n\n\n\nRandom Forest - residuals\n\n\n\n\n\nplot_hist(res_rf_0, breaks = 100)\n\n\n\n\nRandom Forest: Histogram of residual (train)\n\n\n\n\n\ntseries::jarque.bera.test(res_rf_0) \n\n\n    Jarque Bera Test\n\ndata:  res_rf_0\nX-squared = 302491, df = 2, p-value < 2.2e-16\n\n\nOutcome Residuals don‚Äôt have a normal distribution\n\nplot_train_test(res_rf_0, res_rf_0, y_pred_rf_0, test_house$price)\n\n\n\n\nQQplot - Random Forest (train & test set)"
  },
  {
    "objectID": "posts/Housing_Prices/index.html#stat",
    "href": "posts/Housing_Prices/index.html#stat",
    "title": "Regression for Housing Prices",
    "section": "7.1 Stat",
    "text": "7.1 Stat\nNumber of items in test set 5400\n\n(n_data <- nrow(test_house))\n\n[1] 5402\n\n\nNumber of independent variable\n\n(p_data <- ncol(test_house) - 1)\n\n[1] 11\n\n\nMetrics table for each model (test set)\n\ntab_lm <- tab_stat(y_pred_lm, test_house$price, n_data, p_data)\ntab_svr <- tab_stat(y_pred_svr, test_house$price, n_data, p_data)\ntab_rf <- tab_stat(y_pred_rf, test_house$price, n_data, p_data)\n\n\ntab_all\n\n                mse     rmse      rse        R2     adjR2\ntab_lm  41407244465 203487.7 203525.4 0.6692529 0.6685780\ntab_svr 36062347794 189900.9 189936.1 0.7119462 0.7113583\ntab_rf  31663577989 177942.6 177975.6 0.7470821 0.7465659\n\n\nChecking the diffrence between R2 and adj R2\n\n(tab_all$R2 - tab_all$adjR2) / tab_all$R2 \n\n[1] 0.0010085783 0.0008257155 0.0006909001\n\n\nOUTCOME Difference between R2 and adjR2 negligibly small = > we can use only R2\nSUMMARY OF METRICS TABLE\n\nsummary(tab_all)\n\n      mse                 rmse             rse               R2        \n Min.   :3.166e+10   Min.   :177943   Min.   :177976   Min.   :0.6693  \n 1st Qu.:3.386e+10   1st Qu.:183922   1st Qu.:183956   1st Qu.:0.6906  \n Median :3.606e+10   Median :189901   Median :189936   Median :0.7119  \n Mean   :3.638e+10   Mean   :190444   Mean   :190479   Mean   :0.7094  \n 3rd Qu.:3.873e+10   3rd Qu.:196694   3rd Qu.:196731   3rd Qu.:0.7295  \n Max.   :4.141e+10   Max.   :203488   Max.   :203525   Max.   :0.7471  \n     adjR2       \n Min.   :0.6686  \n 1st Qu.:0.6900  \n Median :0.7114  \n Mean   :0.7088  \n 3rd Qu.:0.7290  \n Max.   :0.7466"
  },
  {
    "objectID": "posts/Housing_Prices/index.html#metrics-plot",
    "href": "posts/Housing_Prices/index.html#metrics-plot",
    "title": "Regression for Housing Prices",
    "section": "7.2 Metrics plot",
    "text": "7.2 Metrics plot\n\n\n\n\n\nPlot of quality metrics for all models\n\n\n\n\nREMARKS TO VALUE THE MODEL\n\nLower values of RMSE indicate better fit.\nThe smaller difference between RSE/min and RSE/max the better model is.\nThe greater R2 is the better the model fits given data.\n\nCONCLUSION Random forest is the best."
  },
  {
    "objectID": "posts/Housing_Prices/index.html#plots-predictionreal",
    "href": "posts/Housing_Prices/index.html#plots-predictionreal",
    "title": "Regression for Housing Prices",
    "section": "7.3 Plots prediction~real",
    "text": "7.3 Plots prediction~real\n\n\n\n\n\nPlot of quality metrics for all models\n\n\n\n\nRandom forest have good precision of prediction - the relation predicted value to the real lies on diagonal that means that the error of prediction is small."
  },
  {
    "objectID": "posts/HR_Churn/index.html",
    "href": "posts/HR_Churn/index.html",
    "title": "HR analytics",
    "section": "",
    "text": "This project is focusing mainly on EDA of dataset. The task was to find the model that could predict the such event.\nUsually during the EDA, the analyst comes up with an idea of how to approach the solution of the problem. But this data is really tricky‚Ä¶\nWIP\nMore ‚ùó under construction - coming soon"
  },
  {
    "objectID": "posts/YOLOv3_helmets/index.html",
    "href": "posts/YOLOv3_helmets/index.html",
    "title": "Object detection",
    "section": "",
    "text": "This is a project developed as a final project at the Data Science bootcamp organised by Sages.\nThe basic aim is to prepare a prototype of a model based on YOLOv3 architecture using transfer learning and train it on an existing base of the images of people with and without helmets. The practical application of such a model would be to improve work safety on construction sites by detecting the presence of people and safety helmets (or without?).\nThe orgin dataset has been obtained from kaggle task described as Improve workplace safety by detecting people and hard hats on 5k images with bbox annotations. This dataset contains 5000 images (png file 416x416px) and corresponding 5000 xml file with bounding boxes and annotations in the PASCAL VOC format for 3 classes: helmet, person, head to them."
  },
  {
    "objectID": "posts/YOLOv3_helmets/index.html#how-models-were-build",
    "href": "posts/YOLOv3_helmets/index.html#how-models-were-build",
    "title": "Object detection",
    "section": "How models were build?",
    "text": "How models were build?\nModels have been built assisted by Tensorflow 2 Object Detection API and trained on Google Cloud AI Platform.\nThe base code of SSD model derives from a collection of detection models pre-trained on the COCO 2017 dataset that may be found in [TensorFlow 2 Detection Model Zoo](https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/tf2_detection_zoo.md. The backbone (the feature extractor) is 152-layer ResNets (ResNet 152 v1 FPN denoted as RetinaNet152) trained from the Common Objects in Context (COCO) image dataset.\nThe base code of YOLOv3 model comes from YunYang github with original YOLOv3 weights coming from training on the COCO 2017 dataset. The backbone (the feature extractor) is Darknet53.\nMore details"
  },
  {
    "objectID": "posts/Groceries/index.html",
    "href": "posts/Groceries/index.html",
    "title": "Association Rules in Groceries",
    "section": "",
    "text": "How to arrange the shop space to maximize profits?\nA classic analysis answering the question of how to expand the store to maximize profits, i.e.¬†what product combinations customers most often buy. Here you may also find the answer to why milk is always the farthest from the cash register.\nIn this analysis was used transaction data - Groceries database implemented in the arules package."
  },
  {
    "objectID": "posts/Groceries/index.html#description-of-the-assigned-task",
    "href": "posts/Groceries/index.html#description-of-the-assigned-task",
    "title": "Association Rules in Groceries",
    "section": "1.1 Description of the assigned task",
    "text": "1.1 Description of the assigned task\nThe owner of the supermarket decided to invest the profit in development. Expansion of the store‚Äôs usable area and minor rearrangements are planned. In order to meet the needs of customers, the most popular product groups would be developed.\nThe products group to development and their possible location will be selected on the basis of the analysis of shopping lists (the most frequent), while their location would be determined by the most interesting/strongest association rules."
  },
  {
    "objectID": "posts/Groceries/index.html#main-goals",
    "href": "posts/Groceries/index.html#main-goals",
    "title": "Association Rules in Groceries",
    "section": "1.2 Main goals",
    "text": "1.2 Main goals\n\nSelection of interesting association rules .\nFinding the best association rules.\nFinding practical applications of discovered rules."
  },
  {
    "objectID": "posts/Groceries/index.html#data-source---transactions-data-groceries-products-list-and-dataset-characteristic",
    "href": "posts/Groceries/index.html#data-source---transactions-data-groceries-products-list-and-dataset-characteristic",
    "title": "Association Rules in Groceries",
    "section": "2.1 Data source - transactions data Groceries, products list and dataset characteristic",
    "text": "2.1 Data source - transactions data Groceries, products list and dataset characteristic\nData set size 9835, 169\nAll products available in transactions data Groceries\n\n\n  [1] \"frankfurter\"               \"sausage\"                  \n  [3] \"liver loaf\"                \"ham\"                      \n  [5] \"meat\"                      \"finished products\"        \n  [7] \"organic sausage\"           \"chicken\"                  \n  [9] \"turkey\"                    \"pork\"                     \n [11] \"beef\"                      \"hamburger meat\"           \n [13] \"fish\"                      \"citrus fruit\"             \n [15] \"tropical fruit\"            \"pip fruit\"                \n [17] \"grapes\"                    \"berries\"                  \n [19] \"nuts/prunes\"               \"root vegetables\"          \n [21] \"onions\"                    \"herbs\"                    \n [23] \"other vegetables\"          \"packaged fruit/vegetables\"\n [25] \"whole milk\"                \"butter\"                   \n [27] \"curd\"                      \"dessert\"                  \n [29] \"butter milk\"               \"yogurt\"                   \n [31] \"whipped/sour cream\"        \"beverages\"                \n [33] \"UHT-milk\"                  \"condensed milk\"           \n [35] \"cream\"                     \"soft cheese\"              \n [37] \"sliced cheese\"             \"hard cheese\"              \n [39] \"cream cheese \"             \"processed cheese\"         \n [41] \"spread cheese\"             \"curd cheese\"              \n [43] \"specialty cheese\"          \"mayonnaise\"               \n [45] \"salad dressing\"            \"tidbits\"                  \n [47] \"frozen vegetables\"         \"frozen fruits\"            \n [49] \"frozen meals\"              \"frozen fish\"              \n [51] \"frozen chicken\"            \"ice cream\"                \n [53] \"frozen dessert\"            \"frozen potato products\"   \n [55] \"domestic eggs\"             \"rolls/buns\"               \n [57] \"white bread\"               \"brown bread\"              \n [59] \"pastry\"                    \"roll products \"           \n [61] \"semi-finished bread\"       \"zwieback\"                 \n [63] \"potato products\"           \"flour\"                    \n [65] \"salt\"                      \"rice\"                     \n [67] \"pasta\"                     \"vinegar\"                  \n [69] \"oil\"                       \"margarine\"                \n [71] \"specialty fat\"             \"sugar\"                    \n [73] \"artif. sweetener\"          \"honey\"                    \n [75] \"mustard\"                   \"ketchup\"                  \n [77] \"spices\"                    \"soups\"                    \n [79] \"ready soups\"               \"Instant food products\"    \n [81] \"sauces\"                    \"cereals\"                  \n [83] \"organic products\"          \"baking powder\"            \n [85] \"preservation products\"     \"pudding powder\"           \n [87] \"canned vegetables\"         \"canned fruit\"             \n [89] \"pickled vegetables\"        \"specialty vegetables\"     \n [91] \"jam\"                       \"sweet spreads\"            \n [93] \"meat spreads\"              \"canned fish\"              \n [95] \"dog food\"                  \"cat food\"                 \n [97] \"pet care\"                  \"baby food\"                \n [99] \"coffee\"                    \"instant coffee\"           \n[101] \"tea\"                       \"cocoa drinks\"             \n[103] \"bottled water\"             \"soda\"                     \n[105] \"misc. beverages\"           \"fruit/vegetable juice\"    \n[107] \"syrup\"                     \"bottled beer\"             \n[109] \"canned beer\"               \"brandy\"                   \n[111] \"whisky\"                    \"liquor\"                   \n[113] \"rum\"                       \"liqueur\"                  \n[115] \"liquor (appetizer)\"        \"white wine\"               \n[117] \"red/blush wine\"            \"prosecco\"                 \n[119] \"sparkling wine\"            \"salty snack\"              \n[121] \"popcorn\"                   \"nut snack\"                \n[123] \"snack products\"            \"long life bakery product\" \n[125] \"waffles\"                   \"cake bar\"                 \n[127] \"chewing gum\"               \"chocolate\"                \n[129] \"cooking chocolate\"         \"specialty chocolate\"      \n[131] \"specialty bar\"             \"chocolate marshmallow\"    \n[133] \"candy\"                     \"seasonal products\"        \n[135] \"detergent\"                 \"softener\"                 \n[137] \"decalcifier\"               \"dish cleaner\"             \n[139] \"abrasive cleaner\"          \"cleaner\"                  \n[141] \"toilet cleaner\"            \"bathroom cleaner\"         \n[143] \"hair spray\"                \"dental care\"              \n[145] \"male cosmetics\"            \"make up remover\"          \n[147] \"skin care\"                 \"female sanitary products\" \n[149] \"baby cosmetics\"            \"soap\"                     \n[151] \"rubbing alcohol\"           \"hygiene articles\"         \n[153] \"napkins\"                   \"dishes\"                   \n[155] \"cookware\"                  \"kitchen utensil\"          \n[157] \"cling film/bags\"           \"kitchen towels\"           \n[159] \"house keeping products\"    \"candles\"                  \n[161] \"light bulbs\"               \"sound storage medium\"     \n[163] \"newspapers\"                \"photo/film\"               \n[165] \"pot plants\"                \"flower soil/fertilizer\"   \n[167] \"flower (seeds)\"            \"shopping bags\"            \n[169] \"bags\"                     \n\n\nThe transaction examples\n\n\n    items                 \n[1] {citrus fruit,        \n     semi-finished bread, \n     margarine,           \n     ready soups}         \n[2] {tropical fruit,      \n     yogurt,              \n     coffee}              \n[3] {whole milk}          \n\n\n    items                 \n[1] {chicken,             \n     citrus fruit,        \n     other vegetables,    \n     butter,              \n     yogurt,              \n     frozen dessert,      \n     domestic eggs,       \n     rolls/buns,          \n     rum,                 \n     cling film/bags}     \n[2] {semi-finished bread, \n     bottled water,       \n     soda,                \n     bottled beer}        \n[3] {chicken,             \n     tropical fruit,      \n     other vegetables,    \n     vinegar,             \n     shopping bags}       \n\n\nThe size of the vectors that define the sparse matrix of the data set Groceries where indices is defining products where 43367 is non-zero and pointers - another element of the sparse matrix with 9836 non-zero.\nThe data set structure\n\n\n[1] \"labels\" \"level2\" \"level1\"\n\n\nThe transactions ~ number of products\n\nplot_barplot(tab_src = table(size(Groceries)))\n\n\n\n\nSize - number of products in each of transaction\n\n\n\n\nDistribution\n\nplot_boxplot(tab_src = size(Groceries), v_line = 3, ylim = c(0, 40))\n\n\n\n\nSize - number of products in each of transaction\n\n\n\n\nThe sparse matrix of the dataset\n\n\n\n\n\nImage of spare matrix = transaction & products\n\n\n\n\nSUMMARY - DATABASE CHARACTERISTICS\n\nThe data set contains 9835 transactions composed of 169 items.\nThe data set is rather spare (density of 0.02609146 -> 2,6%).\nThe most frequent items is whole milk - 2513 times; and next is other vegetables - 1903 times.\nThe typical transaction ( shopping list ) counts less than 5 items (average = 4.409) - median is 3;\nThe data set contains extra meta data about items. They are grouped on two levels: level 1 (10 departments) and level 2 (55 product groups)."
  },
  {
    "objectID": "posts/Groceries/index.html#product-list-analysis",
    "href": "posts/Groceries/index.html#product-list-analysis",
    "title": "Association Rules in Groceries",
    "section": "2.2 Product list analysis",
    "text": "2.2 Product list analysis\nVerification of data completeness, number of product groups and departments\n\nAre there any NAs?\n\n\n\n[1] FALSE\n\n\n\nList of items (level 1)\n\n\n\n [1] \"canned food\"          \"detergent\"            \"drinks\"              \n [4] \"fresh products\"       \"fruit and vegetables\" \"meat and sausage\"    \n [7] \"non-food\"             \"perfumery\"            \"processed food\"      \n[10] \"snacks and candies\"  \n\n\n\nItem list for products group (level 2)\n\n\n\n$`baby food`\n[1] \"baby food\"\n\n$bags\n[1] \"shopping bags\" \"bags\"         \n\n$`bakery improver`\n[1] \"baking powder\"         \"preservation products\"\n\n$`bathroom cleaner`\n[1] \"toilet cleaner\"   \"bathroom cleaner\"\n\n$beef\n[1] \"beef\"           \"hamburger meat\"\n\n$beer\n[1] \"bottled beer\" \"canned beer\" \n\n$`bread and backed goods`\n[1] \"rolls/buns\"          \"white bread\"         \"brown bread\"        \n[4] \"pastry\"              \"roll products \"      \"semi-finished bread\"\n[7] \"zwieback\"           \n\n$candy\n[1] \"candy\"\n\n$`canned fish`\n[1] \"canned fish\"\n\n$`canned fruit/vegetables`\n[1] \"canned vegetables\"    \"canned fruit\"         \"pickled vegetables\"  \n[4] \"specialty vegetables\"\n\n$cheese\n[1] \"soft cheese\"      \"sliced cheese\"    \"hard cheese\"      \"cream cheese \"   \n[5] \"processed cheese\" \"spread cheese\"    \"curd cheese\"      \"specialty cheese\"\n\n$`chewing gum`\n[1] \"chewing gum\"\n\n$chocolate\n[1] \"chocolate\"             \"cooking chocolate\"     \"specialty chocolate\"  \n[4] \"specialty bar\"         \"chocolate marshmallow\"\n\n$cleaner\n[1] \"dish cleaner\"     \"abrasive cleaner\" \"cleaner\"         \n\n$coffee\n[1] \"coffee\"         \"instant coffee\"\n\n$condiments\n[1] \"mustard\" \"ketchup\" \"spices\" \n\n$cosmetics\n[1] \"male cosmetics\"           \"make up remover\"         \n[3] \"skin care\"                \"female sanitary products\"\n[5] \"baby cosmetics\"          \n\n$`dairy produce`\n[1] \"whole milk\"         \"butter\"             \"curd\"              \n[4] \"dessert\"            \"butter milk\"        \"yogurt\"            \n[7] \"whipped/sour cream\" \"beverages\"         \n\n$delicatessen\n[1] \"mayonnaise\"     \"salad dressing\" \"tidbits\"       \n\n$`dental care`\n[1] \"dental care\"\n\n$`detergent/softener`\n[1] \"detergent\"   \"softener\"    \"decalcifier\"\n\n$eggs\n[1] \"domestic eggs\"\n\n$fish\n[1] \"fish\"\n\n$`frozen foods`\n[1] \"frozen vegetables\"      \"frozen fruits\"          \"frozen meals\"          \n[4] \"frozen fish\"            \"frozen chicken\"         \"ice cream\"             \n[7] \"frozen dessert\"         \"frozen potato products\"\n\n$fruit\n[1] \"citrus fruit\"   \"tropical fruit\" \"pip fruit\"      \"grapes\"        \n[5] \"berries\"        \"nuts/prunes\"   \n\n$`games/books/hobby`\n[1] \"sound storage medium\" \"newspapers\"           \"photo/film\"          \n\n$garden\n[1] \"pot plants\"             \"flower soil/fertilizer\" \"flower (seeds)\"        \n\n$`hair care`\n[1] \"hair spray\"\n\n$`hard drinks`\n[1] \"brandy\"             \"whisky\"             \"liquor\"            \n[4] \"rum\"                \"liqueur\"            \"liquor (appetizer)\"\n\n$`health food`\n[1] \"cereals\"          \"organic products\"\n\n$`jam/sweet spreads`\n[1] \"jam\"           \"sweet spreads\"\n\n$`long-life bakery products`\n[1] \"long life bakery product\" \"waffles\"                 \n[3] \"cake bar\"                \n\n$`meat spreads`\n[1] \"meat spreads\"\n\n$`non-alc. drinks`\n[1] \"bottled water\"         \"soda\"                  \"misc. beverages\"      \n[4] \"fruit/vegetable juice\" \"syrup\"                \n\n$`non-food house keeping products`\n[1] \"kitchen towels\"         \"house keeping products\" \"candles\"               \n[4] \"light bulbs\"           \n\n$`non-food kitchen`\n[1] \"dishes\"          \"cookware\"        \"kitchen utensil\" \"cling film/bags\"\n\n$`packaged fruit/vegetables`\n[1] \"packaged fruit/vegetables\"\n\n$perfumery\n[1] \"hygiene articles\" \"napkins\"         \n\n$`personal hygiene`\n[1] \"rubbing alcohol\"\n\n$`pet food/care`\n[1] \"dog food\" \"cat food\" \"pet care\"\n\n$pork\n[1] \"pork\"\n\n$poultry\n[1] \"chicken\" \"turkey\" \n\n$`pudding powder`\n[1] \"pudding powder\"\n\n$sausage\n[1] \"frankfurter\"       \"sausage\"           \"liver loaf\"       \n[4] \"ham\"               \"meat\"              \"finished products\"\n[7] \"organic sausage\"  \n\n$`seasonal products`\n[1] \"seasonal products\"\n\n$`shelf-stable dairy`\n[1] \"UHT-milk\"       \"condensed milk\" \"cream\"         \n\n$snacks\n[1] \"salty snack\"    \"popcorn\"        \"nut snack\"      \"snack products\"\n\n$soap\n[1] \"soap\"\n\n$`soups/sauces`\n[1] \"soups\"                 \"ready soups\"           \"Instant food products\"\n[4] \"sauces\"               \n\n$`staple foods`\n[1] \"potato products\" \"flour\"           \"salt\"            \"rice\"           \n[5] \"pasta\"          \n\n$sweetener\n[1] \"sugar\"            \"artif. sweetener\" \"honey\"           \n\n$`tea/cocoa drinks`\n[1] \"tea\"          \"cocoa drinks\"\n\n$vegetables\n[1] \"root vegetables\"  \"onions\"           \"herbs\"            \"other vegetables\"\n\n$`vinegar/oils`\n[1] \"vinegar\"       \"oil\"           \"margarine\"     \"specialty fat\"\n\n$wine\n[1] \"white wine\"     \"red/blush wine\" \"prosecco\"       \"sparkling wine\"\n\n\n\n\nThe number of items in each products groups\n\n\nplot_barplot(tab_src = table(len_list_lvl2), h_line = 3,\n             xlab = \"number of products in group\", ylab = \"number of products' group\")\n\n\n\n\nNumber of items in each products group\n\n\n\n\n\nTransactions by items (level 1)\n\n\n\n    items                 \n[1] {citrus fruit,        \n     semi-finished bread, \n     margarine,           \n     ready soups}         \n[2] {tropical fruit,      \n     yogurt,              \n     coffee}              \n[3] {whole milk}          \n\n\n\nTransactions by products group (level 2)\n\n\n\n    items                    \n[1] {bread and backed goods, \n     fruit,                  \n     soups/sauces,           \n     vinegar/oils}           \n[2] {coffee,                 \n     dairy produce,          \n     fruit}                  \n[3] {dairy produce}          \n\n\nSUMMARY - ITEMS AND PRODUCTS GROUPS\n\nMeta information stored in level 1 defines the most general division into departments in the store, of which there are 10.\nMeta information stored in level 2 defines 55 products group.\nDue to the quality of the analysis, it was decided that an analysis based on items and, on a more general level as products group would be more appropriate for the preparation of management decisions. In the further part of the material, the analysis is carried out in two ways - for items and products groups.\nIn level 2 196 items were divided into 55 products group. As average products group has 3 items, but 7 products group has 6 or more items.\n\n\n2.2.1 Visualisation for items from Groceries\n\n20 items with the highest relative support\n\n\nplot_freq(tab_src = Groceries, v_line = 0.05, topN = 20)\n\n\n\n\nPlot of frequency for top 20 products\n\n\n\n\n\nThe items with min relative support equals 0.10\n\n\nplot_freq(tab_src = Groceries, v_line = 0.10, support = 0.10)\n\n\n\n\nPlot of frequency for products with min support = 0.1\n\n\n\n\n\nThe items with min relative support equals 0.05\n\n\nplot_freq(tab_src = Groceries, v_line = 0.05, support = 0.05)\n\n\n\n\nPlot of frequency for products with min support = 0.05\n\n\n\n\n\n\n2.2.2 Visualisation for product groups from Groceries ( level_2 )\n\n20 product groups with the highest relative support\n\n\nplot_freq(tab_src = Groceries_lvl2, v_line = 0.05, topN = 20)\n\n\n\n\nPlot of frequency for 20 top products‚Äô groups\n\n\n\n\n\nThe product groups with min relative support equals 0.10\n\n\nplot_freq(tab_src = Groceries_lvl2, v_line = 0.10, support = 0.10)\n\n\n\n\nPlot of frequency for products‚Äô groups with min support = 0.10\n\n\n\n\n\nThe product groups with min relative support equals 0.05\n\n\nplot_freq(tab_src = Groceries_lvl2, v_line = 0.05, support = 0.05)\n\n\n\n\nPlot of frequency for products‚Äô groups with min support = 0.05\n\n\n\n\n\n\n2.2.3 Support and relative support for items\nRelative support may be interpreted as probabilities (i.e.¬†absolute support/9835)\n\nplot_boxplot(tab_src = tab_freq, xlab = \"relative support\", ylim = c(0, 0.3))\n\n\n\n\nRelative support for each single product\n\n\n\n\nList of items ordered by decreasing value of relative support\nThe items with the highest‚Ä¶\n\n\n      whole milk other vegetables       rolls/buns             soda \n       0.2555160        0.1934926        0.1839349        0.1743772 \n          yogurt    bottled water \n       0.1395018        0.1105236 \n\n\n..and the lowest relative support\n\n\n       baby cosmetics       kitchen utensil                  bags \n         0.0006100661          0.0004067107          0.0004067107 \npreservation products             baby food  sound storage medium \n         0.0002033554          0.0001016777          0.0001016777 \n\n\n\nThe support (absolute) for items (number of transaction for each item)\n\nplot_boxplot(tab_src = tab_freq_ab, xlab = \"support\", ylim = c(0, 3000))\n\n\n\n\nSupport for each single product\n\n\n\n\nThe proposal of items with z minSup & minrSup\n\nitems with relative support > 20% (absolute support: 1968 = 0.20 * 9835)\n\n\n\n\n‚Äì count: 1\n‚Äì example:\n\n\nwhole milk \n  0.255516 \n\n\n\nitems with relative support >= 10% (absolute support: 984 = 0.10 * 9835)\n\n\n\n\n‚Äì count: 8\n‚Äì example:\n\n\n      whole milk other vegetables       rolls/buns             soda \n       0.2555160        0.1934926        0.1839349        0.1743772 \n          yogurt    bottled water  root vegetables   tropical fruit \n       0.1395018        0.1105236        0.1089985        0.1049314 \n\n\n\nitems with relative support >= 5% (absolute support: 490 = 0.05 * 9835)\n\n\n\n\n‚Äì count: 28\n‚Äì example:\n\n\n           whole milk      other vegetables            rolls/buns \n           0.25551601            0.19349263            0.18393493 \n                 soda                yogurt         bottled water \n           0.17437722            0.13950178            0.11052364 \n      root vegetables        tropical fruit         shopping bags \n           0.10899847            0.10493137            0.09852567 \n              sausage                pastry          citrus fruit \n           0.09395018            0.08896797            0.08276563 \n         bottled beer            newspapers           canned beer \n           0.08052872            0.07981698            0.07768175 \n            pip fruit fruit/vegetable juice    whipped/sour cream \n           0.07564820            0.07229283            0.07168277 \n          brown bread         domestic eggs           frankfurter \n           0.06487036            0.06344687            0.05897306 \n            margarine                coffee                  pork \n           0.05856634            0.05805796            0.05765125 \n               butter                  curd                  beef \n           0.05541434            0.05327911            0.05246568 \n              napkins \n           0.05236401 \n\n\n\nitems with absolute support >= 100 (~>1%)\n\n\n\n\n‚Äì count: 88\n‚Äì example:\n\n\n      whole milk other vegetables       rolls/buns             soda \n            2513             1903             1809             1715 \n          yogurt \n            1372 \n\n\n\n\n2.2.4 The most frequent items\nList of the most frequent items with relative support equal 10% (984 transactions: minSup = 984, minrSup = 0.10)\n\n\n[1] \"whole milk\"       \"other vegetables\" \"rolls/buns\"       \"soda\"            \n[5] \"yogurt\"           \"bottled water\"    \"root vegetables\"  \"tropical fruit\"  \n\n\nThe most frequent items belongs to groups:\n\n\n                  level2\n1                  fruit\n2             vegetables\n4          dairy produce\n6 bread and backed goods\n7        non-alc. drinks\n\n\nCONCLUSIONS\nThe most frequent items are: (= frequent items with support greater than minSup = 984)\n\n\n[1] \"whole milk\"       \"other vegetables\" \"rolls/buns\"       \"soda\"            \n[5] \"yogurt\"           \"bottled water\"    \"root vegetables\"  \"tropical fruit\"  \n\n\nThe most frequent items belong to the following products groups\n\n\n\nproduct group\n#\nitems\n\n\n\n\nbread and backed goods\n1\n‚Äúrolls/buns‚Äù\n\n\ndairy produce\n2\n‚Äúwhole milk‚Äù ‚Äúyogurt‚Äù\n\n\nfruit\n1\n‚Äútropical fruit‚Äù\n\n\nnon-alc. drinks\n2\n‚Äúsoda‚Äù ‚Äúbottled water‚Äù\n\n\nvegetables\n2\n‚Äúother vegetables‚Äù ‚Äúroot vegetables‚Äù\n\n\n\nVALIDATION (apriori for frequent items)\n\nlist_pop_products_spr  <- \n  apriori(data = Groceries, \n          parameter = list(support = 0.003, confidence = 0.2,\n                           target = \"frequent itemsets\"))\n\nList of the most frequent items with minSup equals 984\n\ninspect(sort(subset(list_pop_products_spr, subset = count > 984)))\n\n    items              support   count\n[1] {whole milk}       0.2555160 2513 \n[2] {other vegetables} 0.1934926 1903 \n[3] {rolls/buns}       0.1839349 1809 \n[4] {soda}             0.1743772 1715 \n[5] {yogurt}           0.1395018 1372 \n[6] {bottled water}    0.1105236 1087 \n[7] {root vegetables}  0.1089985 1072 \n[8] {tropical fruit}   0.1049314 1032 \n\n\nThus, using the alternative method, the same result was obtained.\n\n\n2.2.5 Support and relative support of product groups (level2)\nRelative support may be interpreted as probabilities (i.e.¬†absolute support/9835)\nList of items ordered by decreasing value of relative support\n\nplot_boxplot(tab_src = tab_freq_lvl2, xlab = \"relative support\", ylim = c(0, 0.5))\n\n\n\n\nRelative support for each single products‚Äô group\n\n\n\n\nThe product groups with the highest‚Ä¶\n\n\n         dairy produce bread and backed goods        non-alc. drinks \n             0.4430097              0.3455008              0.3179461 \n            vegetables                  fruit                sausage \n             0.2730046              0.2491103              0.1891205 \n\n\n..and the lowest relative support\n\n\n            fish             soap   pudding powder        hair care \n    0.0029486528     0.0026436197     0.0023385867     0.0011184545 \npersonal hygiene        baby food \n    0.0010167768     0.0001016777 \n\n\nThe support (absolute) for items (number of transaction for each item)\n\nplot_boxplot(tab_src = tab_freq_lvl2_ab, xlab = \"support\", ylim = c(0, 5000))\n\n\n\n\nSupport for each single products‚Äô group\n\n\n\n\nThe proposal of products group with z minSup & minrSup\n\nproducts group with relative support > 20% (absolute support: 1968 = 0.20 * 9835)\n\n\n\n\n‚Äì count: 5\n‚Äì example:\n\n\n         dairy produce bread and backed goods        non-alc. drinks \n             0.4430097              0.3455008              0.3179461 \n            vegetables                  fruit \n             0.2730046              0.2491103 \n\n\n\nproducts group with relative support >= 10% (absolute support: 984 = 0.10 * 9835)\n\n\n\n\n‚Äì count: 10\n‚Äì example:\n\n\n         dairy produce bread and backed goods        non-alc. drinks \n             0.4430097              0.3455008              0.3179461 \n            vegetables                  fruit \n             0.2730046              0.2491103 \n\n\n\nproducts group with relative support >= 5% (absolute support: 490 = 0.05 * 9835)\n\n\n\n\n‚Äì count: 21\n‚Äì example:\n\n\n         dairy produce bread and backed goods        non-alc. drinks \n             0.4430097              0.3455008              0.3179461 \n            vegetables                  fruit \n             0.2730046              0.2491103 \n\n\n\nproducts groups with absolute support >= 100 (~>1%)\n\n\n\n\n‚Äì count: 44\n‚Äì example:\n\n\n         dairy produce bread and backed goods        non-alc. drinks \n                  4357                   3398                   3127 \n            vegetables                  fruit \n                  2685                   2450 \n\n\n\n\n2.2.6 The most frequent products groups (level2)\nList of the most frequent products groups with relative support equal 10% (984 transakcje: minSup = 984, minrSup = 0.10)\n\n(list_pop_gr_products <- \n   names(sort(tab_freq_lvl2_ab[tab_freq_lvl2_ab > 984], decreasing = TRUE)))\n\n [1] \"dairy produce\"          \"bread and backed goods\" \"non-alc. drinks\"       \n [4] \"vegetables\"             \"fruit\"                  \"sausage\"               \n [7] \"beer\"                   \"cheese\"                 \"frozen foods\"          \n[10] \"chocolate\"             \n\n\nCONCLUSIONS\nThe most frequent products group are:\n\ndairy produce occur in 4357 out of 9835 transactions (44,3%).\nbread and backed goods occur in w 3398 out of 9835 transactions (34,5%).\nnon-alc. drinks occur in 3127 out of 9835 transactions (31,8%).\nvegetables occur in 2685 out of 9835 transactions (27,3%).\nfruit occur in 2450 out of 9835 transactions (24,9%).\n\nVALIDATION (apriori for frequent products groups)\n\nlist_pop_gr_products_spr  <- \n  apriori(data = Groceries_lvl2, \n          parameter = list(support = 0.003, confidence = 0.2, \n                           target = \"frequent itemsets\"))\n\nList of the most frequent products groups with minSup equals 984\n\ninspect(sort(subset(list_pop_gr_products_spr, subset = count > 984)))\n\n     items                                     support   count\n[1]  {dairy produce}                           0.4430097 4357 \n[2]  {bread and backed goods}                  0.3455008 3398 \n[3]  {non-alc. drinks}                         0.3179461 3127 \n[4]  {vegetables}                              0.2730046 2685 \n[5]  {fruit}                                   0.2491103 2450 \n[6]  {sausage}                                 0.1891205 1860 \n[7]  {bread and backed goods, dairy produce}   0.1876970 1846 \n[8]  {dairy produce, vegetables}               0.1704118 1676 \n[9]  {dairy produce, fruit}                    0.1563803 1538 \n[10] {beer}                                    0.1555669 1530 \n[11] {dairy produce, non-alc. drinks}          0.1519065 1494 \n[12] {cheese}                                  0.1266904 1246 \n[13] {bread and backed goods, non-alc. drinks} 0.1242501 1222 \n[14] {frozen foods}                            0.1169293 1150 \n[15] {bread and backed goods, vegetables}      0.1162176 1143 \n[16] {chocolate}                               0.1087951 1070 \n[17] {bread and backed goods, fruit}           0.1075750 1058 \n[18] {dairy produce, sausage}                  0.1073716 1056 \n[19] {fruit, vegetables}                       0.1070666 1053 \n[20] {bread and backed goods, sausage}         0.1036096 1019 \n\n\nThis confirms the previous results - the same list of the most frequent product groups was obtained.\n\n\n2.2.7 The frequent items and the frequent products groups\nAnalysis of which items are frequent and from which products groups with the greatest support (>30% of transactions, i.e.¬†for the first three)\nATTENTION Confirmation of the observation that the support of a frequent group is ‚Äòbuilt‚Äô by two-three products (horizontal lines on plots = average for given group)\n\nproducts group dairy produce - list of items with value of relative support\n\n\n\n                   relative support\nwhole milk               0.25551601\nyogurt                   0.13950178\nwhipped/sour cream       0.07168277\nbutter                   0.05541434\ncurd                     0.05327911\ndessert                  0.03711235\nbutter milk              0.02796136\nbeverages                0.02602949\n\n\n\nplot_barplot(tab_src = rev(gr_prod_1), v_line = mean(gr_prod_1), \n             horiz_flag = TRUE, xlab = \"relative support\")\n\n\n\n\nRelative support for products from ‚Äòdairy produce‚Äô group\n\n\n\n\n\nproducts group bread and backed goods - list of items with value of relative support\n\n\n\n                    relative support\nrolls/buns               0.183934926\npastry                   0.088967972\nbrown bread              0.064870361\nwhite bread              0.042094560\nsemi-finished bread      0.017691917\nroll products            0.010269446\nzwieback                 0.006914082\n\n\n\nplot_barplot(tab_src = rev(gr_prod_2), v_line = mean(gr_prod_2), \n       horiz_flag = TRUE, xlab = \"relative support\", xlim = c(0, 0.25))\n\n\n\n\nRelative support for products from ‚Äòbread and backed goods‚Äô group\n\n\n\n\n\nproducts group non-alc. drinks - list of items with value of relative support\n\n\n\n                      relative support\nsoda                       0.174377224\nbottled water              0.110523640\nfruit/vegetable juice      0.072292832\nmisc. beverages            0.028368073\nsyrup                      0.003253686\n\n\n\nplot_barplot(tab_src = rev(gr_prod_3), v_line = mean(gr_prod_3), \n       horiz_flag = TRUE, xlab = \"relative support\", xlim = c(0, 0.25))\n\n\n\n\nRelative support for products from ‚Äònon-alc. drinks‚Äô group"
  },
  {
    "objectID": "posts/Groceries/index.html#model-apriori-for-items---1st-approach",
    "href": "posts/Groceries/index.html#model-apriori-for-items---1st-approach",
    "title": "Association Rules in Groceries",
    "section": "3.1 Model apriori for items - 1st approach",
    "text": "3.1 Model apriori for items - 1st approach\n\nap_param <- new(\"APparameter\", \"confidence\" = 0.2, \"support\" = 0.003) \nrules_groc <- apriori(data = Groceries, ap_param)\n\nApriori\n\nParameter specification:\n confidence minval smax arem  aval originalSupport maxtime support minlen\n        0.2    0.1    1 none FALSE            TRUE       5   0.003      1\n maxlen target  ext\n     10  rules TRUE\n\nAlgorithmic control:\n filter tree heap memopt load sort verbose\n    0.1 TRUE TRUE  FALSE TRUE    2    TRUE\n\nAbsolute minimum support count: 29 \n\nset item appearances ...[0 item(s)] done [0.00s].\nset transactions ...[169 item(s), 9835 transaction(s)] done [0.00s].\nsorting and recoding items ... [136 item(s)] done [0.00s].\ncreating transaction tree ... done [0.00s].\nchecking subsets of size 1 2 3 4 5 done [0.00s].\nwriting ... [2246 rule(s)] done [0.00s].\ncreating S4 object  ... done [0.00s].\n\n\nAssumptions:\n\nassumed \\(minSup = 0.003\\) means that item must have absolute support over 29 transactions\nassumed \\(minConf = 0.2\\) means that if LHS contains selected item that 20% of RHS will follow the rule\n\n\nplot_barplot(tab_src = table(size(rules_groc)), xlab = \"length of rule\")\n\n\n\n\nLength of the associate rules = LHS+RHS (products)\n\n\n\n\nSummary:\n\n2246 association rules were found for the requested search parameters\n67,4% rules - 1514 z 2246 - have a length (LHS+RHS) of 3 (elements)\n\n\ninspect(sort(rules_groc, by = \"lift\")[1:10])\n\n     lhs                        rhs                      support confidence    coverage      lift count\n[1]  {Instant food products} => {hamburger meat}     0.003050330  0.3797468 0.008032537 11.421438    30\n[2]  {flour}                 => {sugar}              0.004982206  0.2865497 0.017386884  8.463112    49\n[3]  {processed cheese}      => {white bread}        0.004168785  0.2515337 0.016573462  5.975445    41\n[4]  {citrus fruit,                                                                                    \n      tropical fruit,                                                                                  \n      other vegetables,                                                                                \n      whole milk}            => {root vegetables}    0.003152008  0.6326531 0.004982206  5.804238    31\n[5]  {tropical fruit,                                                                                  \n      root vegetables,                                                                                 \n      other vegetables,                                                                                \n      whole milk}            => {citrus fruit}       0.003152008  0.4492754 0.007015760  5.428284    31\n[6]  {liquor}                => {bottled beer}       0.004677173  0.4220183 0.011082867  5.240594    46\n[7]  {citrus fruit,                                                                                    \n      root vegetables,                                                                                 \n      other vegetables,                                                                                \n      whole milk}            => {tropical fruit}     0.003152008  0.5438596 0.005795628  5.183004    31\n[8]  {berries,                                                                                         \n      whole milk}            => {whipped/sour cream} 0.004270463  0.3620690 0.011794611  5.050990    42\n[9]  {herbs,                                                                                           \n      whole milk}            => {root vegetables}    0.004168785  0.5394737 0.007727504  4.949369    41\n[10] {tropical fruit,                                                                                  \n      whole milk,                                                                                      \n      yogurt}                => {curd}               0.003965430  0.2617450 0.015149975  4.912713    39\n\n\n\n\n\n\n\n\nReminder\n\n\n\nIf the value lift = x for given rule, it means that items from LHS and RHS occur with each other x times more often compared to transactions, where these items occur independently.\n\n\n\nInstant food products & hamburger meat are purchased 11 times more often together than separately (rule [1]),\nprocessed cheese & white bread are purchased 8,5 times more often together than separately (rule [3])\n\n\ninspect(sort(rules_groc, by = \"confidence\")[1:10])\n\n     lhs                     rhs                    support confidence    coverage     lift count\n[1]  {citrus fruit,                                                                              \n      tropical fruit,                                                                            \n      root vegetables,                                                                           \n      whole milk}         => {other vegetables} 0.003152008  0.8857143 0.003558719 4.577509    31\n[2]  {root vegetables,                                                                           \n      butter,                                                                                    \n      yogurt}             => {whole milk}       0.003050330  0.7894737 0.003863752 3.089723    30\n[3]  {citrus fruit,                                                                              \n      tropical fruit,                                                                            \n      root vegetables}    => {other vegetables} 0.004473818  0.7857143 0.005693950 4.060694    44\n[4]  {root vegetables,                                                                           \n      other vegetables,                                                                          \n      brown bread}        => {whole milk}       0.003152008  0.7750000 0.004067107 3.033078    31\n[5]  {onions,                                                                                    \n      butter}             => {whole milk}       0.003050330  0.7500000 0.004067107 2.935237    30\n[6]  {tropical fruit,                                                                            \n      curd,                                                                                      \n      yogurt}             => {whole milk}       0.003965430  0.7500000 0.005287239 2.935237    39\n[7]  {curd,                                                                                      \n      domestic eggs}      => {whole milk}       0.004778851  0.7343750 0.006507372 2.874086    47\n[8]  {tropical fruit,                                                                            \n      butter,                                                                                    \n      yogurt}             => {whole milk}       0.003355363  0.7333333 0.004575496 2.870009    33\n[9]  {tropical fruit,                                                                            \n      root vegetables,                                                                           \n      whipped/sour cream} => {other vegetables} 0.003355363  0.7333333 0.004575496 3.789981    33\n[10] {butter,                                                                                    \n      curd}               => {whole milk}       0.004880529  0.7164179 0.006812405 2.803808    48\n\n\n\n\n\n\n\n\nReminder\n\n\n\nIt the value of confidence = x for the rule, which means that every time when items form LHS was in transaction, x times of them contains also items form RHS.\n\\(conf(X->Y)\\) may be interpreted as conditional probability \\(P(Y|X)\\)\n\n\n\nif citrus fruit, tropical fruit, root vegetables, whole milk then in 88% of transaction also other vegetables (rule [1]);\nif root vegetables, butter & yogurt then in 79% of transaction also whole milk (rule [2]);\nif citrus fruit, tropical fruit, root vegetables then in 79% of transaction also other vegetables (rule [3]),\n\n\ninspect(sort(rules_groc, by = \"support\")[1:10])\n\n     lhs                   rhs                support    confidence coverage \n[1]  {}                 => {whole milk}       0.25551601 0.2555160  1.0000000\n[2]  {other vegetables} => {whole milk}       0.07483477 0.3867578  0.1934926\n[3]  {whole milk}       => {other vegetables} 0.07483477 0.2928770  0.2555160\n[4]  {rolls/buns}       => {whole milk}       0.05663447 0.3079049  0.1839349\n[5]  {whole milk}       => {rolls/buns}       0.05663447 0.2216474  0.2555160\n[6]  {yogurt}           => {whole milk}       0.05602440 0.4016035  0.1395018\n[7]  {whole milk}       => {yogurt}           0.05602440 0.2192598  0.2555160\n[8]  {root vegetables}  => {whole milk}       0.04890696 0.4486940  0.1089985\n[9]  {root vegetables}  => {other vegetables} 0.04738180 0.4347015  0.1089985\n[10] {other vegetables} => {root vegetables}  0.04738180 0.2448765  0.1934926\n     lift     count\n[1]  1.000000 2513 \n[2]  1.513634  736 \n[3]  1.513634  736 \n[4]  1.205032  557 \n[5]  1.205032  557 \n[6]  1.571735  551 \n[7]  1.571735  551 \n[8]  1.756031  481 \n[9]  2.246605  466 \n[10] 2.246605  466 \n\n\n\n\n\n\n\n\nReminder\n\n\n\nIt the value of relative support = x for the rule, which means that x transactions contain products listed in the LHS and RHS.\n\n\n\nthe rule of relative support of 0.25 means that in 25% of transactions there is whole milk (count = 2513)(rule [1]);\nrule whole milk <=> other vegetables of relative support of 0.075 means that whole milk & other vegetables occur in 7,5% of transactions (here: what is the successor and what is the antecedent is not important) (rule [2], [3]);\nrule rolls/buns <=> yogurt of relative support of 0.075 means that rolls/buns & yogurt occur in 7,5% of transactions (here: what is the successor and what is the antecedent is not important) (rule [4], [5]).\n\nQuality of received rules (overview)\n\nplot_boxplot(tab_src = quality(rules_groc)[\"support\"], box_col = col_0, ylim = c(0, 0.02), outline = FALSE)\n\n\n\n\nBoxplot of quality measures - support\n\n\n\n\n\nplot_boxplot(tab_src = quality(rules_groc)[\"confidence\"], box_col = col_2, ylim = c(0, 1))\n\n\n\n\nBoxplot of quality measures - confidence\n\n\n\n\n\nplot_boxplot(tab_src = quality(rules_groc)[\"lift\"], box_col = col_4, ylim = c(0, 12))\n\n\n\n\nBoxplot of quality measures - lift\n\n\n\n\nConclusions on rule quality\n\nMax value of relative support is 25,5% (absolute support 2513), average value is 0,6% (61,8) - which almost coincides with the 3/4 quantile\nMax value of confidence is 88,5%, and min = 20%, average value is 36,7% (it can be roughly said that in 1 out of 3 cases, after purchasing LHS items, RHS items are purchased)\nMax value of lift is 11,4, but it is an outlier. Average value is 2,25 (Over 4, outliers start)\n\nRule length analysis\n\nplot_barplot(tab_src = table(size(rules_groc)), xlab = \"length of rule\")\n\n\n\n\nLength of the associate rules = LHS+RHS\n\n\n\n\nConclusions regarding the length of rules\n\n67,4% (1514 out of 2246) rules have length (LHS+RHS) of 3 (rules contains 3 item)\n17% and 15,7% of rules have length appropriately - 2 & 4\nthere is one rule where LHS is the empty set.\n\nLength analysis of LHS and RHS\n\nsummary(size(rules_groc@rhs))\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      1       1       1       1       1       1 \n\n\nAll antecedents have length 1.\n\nsummary(size(rules_groc@lhs))\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   2.000   2.000   2.001   2.000   4.000 \n\n\n\nplot_barplot(tab_src = table(size(rules_groc@lhs)))\n\n\n\n\nLength of the associate rules - LHS\n\n\n\n\n\n67,4% (1514 out of 2246) rules have a consequence with length of 2\nsets of rules where the consequence has a length of 1 and 3 are 16% of all for each length"
  },
  {
    "objectID": "posts/Groceries/index.html#model-apriori-for-products-group---1st-approach",
    "href": "posts/Groceries/index.html#model-apriori-for-products-group---1st-approach",
    "title": "Association Rules in Groceries",
    "section": "3.2 Model apriori for products group - 1st approach",
    "text": "3.2 Model apriori for products group - 1st approach\n\nrules_groc_lvl2 <- apriori(data = Groceries_lvl2, \n                           parameter = list(support = 0.003, confidence = 0.2, minlen = 2))\n\nApriori\n\nParameter specification:\n confidence minval smax arem  aval originalSupport maxtime support minlen\n        0.2    0.1    1 none FALSE            TRUE       5   0.003      2\n maxlen target  ext\n     10  rules TRUE\n\nAlgorithmic control:\n filter tree heap memopt load sort verbose\n    0.1 TRUE TRUE  FALSE TRUE    2    TRUE\n\nAbsolute minimum support count: 29 \n\nset item appearances ...[0 item(s)] done [0.00s].\nset transactions ...[55 item(s), 9835 transaction(s)] done [0.00s].\nsorting and recoding items ... [49 item(s)] done [0.00s].\ncreating transaction tree ... done [0.00s].\nchecking subsets of size 1 2 3 4 5 6 7 done [0.01s].\nwriting ... [8411 rule(s)] done [0.00s].\ncreating S4 object  ... done [0.00s].\n\n\nAssumptions:\n\nassumed \\(minSup = 0.003\\) means that products group must have absolute support over 29 transactions\nassumed \\(minConf = 0.2\\) means that if LHS contains selected products group that 20% of RHS will follow the rule\nassumed \\(minLen = 2\\) means that rule has to have minimum two items\n\n\nplot_barplot(tab_src = table(size(rules_groc_lvl2)), xlab = \"lengthof rule\")\n\n\n\n\nLength of the associate rules = LHS+RHS (products group)\n\n\n\n\nSummary:\n\n8411 association rules were found for the requested search parameters\n42% of the rules - 3548 out of 8411 - have a length (LHS+RHS) of 4 (4 elements); 27% and 22% of the rules - have a length of 3 and 5 elements respectively.\n\n\ninspect(sort(rules_groc_lvl2, by = \"lift\")[1:10])\n\n     lhs                   rhs                support confidence    coverage     lift count\n[1]  {dairy produce,                                                                       \n      sweetener,                                                                           \n      vinegar/oils}     => {staple foods} 0.003253686  0.4637681 0.007015760 9.158955    32\n[2]  {sweetener,                                                                           \n      vinegar/oils}     => {staple foods} 0.003660397  0.4186047 0.008744281 8.267022    36\n[3]  {dairy produce,                                                                       \n      staple foods,                                                                        \n      vinegar/oils}     => {sweetener}    0.003253686  0.3076923 0.010574479 8.026933    32\n[4]  {staple foods,                                                                        \n      vinegar/oils}     => {sweetener}    0.003660397  0.2880000 0.012709710 7.513210    36\n[5]  {dairy produce,                                                                       \n      fruit,                                                                               \n      sweetener}        => {staple foods} 0.003965430  0.3451327 0.011489578 6.816025    39\n[6]  {dairy produce,                                                                       \n      non-alc. drinks,                                                                     \n      sweetener}        => {staple foods} 0.003558719  0.3181818 0.011184545 6.283771    35\n[7]  {dairy produce,                                                                       \n      sweetener,                                                                           \n      vegetables}       => {staple foods} 0.003965430  0.3145161 0.012608033 6.211378    39\n[8]  {dairy produce,                                                                       \n      fruit,                                                                               \n      staple foods}     => {sweetener}    0.003965430  0.2363636 0.016776817 6.166144    39\n[9]  {dairy produce,                                                                       \n      sweetener}        => {staple foods} 0.007727504  0.3003953 0.025724453 5.932505    76\n[10] {fruit,                                                                               \n      sweetener}        => {staple foods} 0.004270463  0.2957746 0.014438231 5.841252    42\n\n\n\n\n\n\n\n\nReminder\n\n\n\nIf the value lift = x for given rule, it means that items from LHS and RHS occur with each other x times more often compared to transactions, where these items occur independently.\n\n\n\nproducts groups dairy produce, sweetener, vinegar/oils with staple foods are 9,2 times more often purchased together than separately (applies to LHS and RHS) (rule [1]),\nproducts groups sweetener & vinegar/oils are purchased together with staple foods 8,3 more often purchased together than separately (rule [2])\nrule [3] is very similar to [1] but \\(lift = 8.0\\)\nrule [4] is very similar to [2] but \\(lift = 7.5\\)\n\n\ninspect(sort(rules_groc_lvl2, by = \"confidence\")[1:10])\n\n     lhs                          rhs                 support confidence    coverage     lift count\n[1]  {chocolate,                                                                                   \n      fruit,                                                                                       \n      staple foods}            => {dairy produce} 0.003558719  1.0000000 0.003558719 2.257287    35\n[2]  {eggs,                                                                                        \n      fruit,                                                                                       \n      staple foods}            => {dairy produce} 0.003660397  0.9729730 0.003762074 2.196279    36\n[3]  {cheese,                                                                                      \n      eggs,                                                                                        \n      perfumery}               => {dairy produce} 0.003660397  0.9729730 0.003762074 2.196279    36\n[4]  {eggs,                                                                                        \n      fruit,                                                                                       \n      non-alc. drinks,                                                                             \n      vinegar/oils}            => {dairy produce} 0.003457041  0.9714286 0.003558719 2.192793    34\n[5]  {frozen foods,                                                                                \n      fruit,                                                                                       \n      non-alc. drinks,                                                                             \n      staple foods}            => {dairy produce} 0.003152008  0.9687500 0.003253686 2.186747    31\n[6]  {frozen foods,                                                                                \n      fruit,                                                                                       \n      non-alc. drinks,                                                                             \n      vinegar/oils}            => {dairy produce} 0.003050330  0.9677419 0.003152008 2.184471    30\n[7]  {bread and backed goods,                                                                      \n      cheese,                                                                                      \n      fruit,                                                                                       \n      non-alc. drinks,                                                                             \n      perfumery}               => {dairy produce} 0.003050330  0.9677419 0.003152008 2.184471    30\n[8]  {bread and backed goods,                                                                      \n      fruit,                                                                                       \n      pork,                                                                                        \n      sausage}                 => {dairy produce} 0.004880529  0.9600000 0.005083884 2.166996    48\n[9]  {bread and backed goods,                                                                      \n      cheese,                                                                                      \n      non-alc. drinks,                                                                             \n      perfumery}               => {dairy produce} 0.004270463  0.9545455 0.004473818 2.154683    42\n[10] {bread and backed goods,                                                                      \n      eggs,                                                                                        \n      fruit,                                                                                       \n      vinegar/oils}            => {dairy produce} 0.003863752  0.9500000 0.004067107 2.144423    38\n\n\n\n\n\n\n\n\nReminder\n\n\n\nIt the value of confidence = x for the rule, which means that every time when items form LHS was in transaction, x times of them contains also items form RHS.\n\\(conf(X->Y)\\) may be interpreted as conditional probability \\(P(Y|X)\\)\n\n\n\nif products groups chocolate, fruit & staple foods then with confidence 100% also products group dairy produce (rule [1])\n\nNOTE Because products group dairy produce occurs in 44% of transactions - it builds high-confidence rules when in a consequence. It follows from the definition \\(conf(X->Y) = sup(X->Y) / sup(X)\\) (dairy produce are building value \\(sup(X->Y)\\))\nWhat the rules look like when dairy produceis an antecedent?\n\ninspect(\n  sort(\n    subset(rules_groc_lvl2, subset = lhs %in% \"dairy produce\" & confidence > 0.80), \n    by = \"confidence\"))\n\n     lhs                             rhs                          support confidence    coverage     lift count\n[1]  {dairy produce,                                                                                           \n      frozen foods,                                                                                            \n      fruit,                                                                                                   \n      poultry}                    => {vegetables}             0.004168785  0.8367347 0.004982206 3.064911    41\n[2]  {chocolate,                                                                                               \n      dairy produce,                                                                                           \n      non-alc. drinks,                                                                                         \n      sausage,                                                                                                 \n      vegetables}                 => {bread and backed goods} 0.003558719  0.8333333 0.004270463 2.411958    35\n[3]  {cheese,                                                                                                  \n      dairy produce,                                                                                           \n      fruit,                                                                                                   \n      staple foods}               => {vegetables}             0.003863752  0.8260870 0.004677173 3.025909    38\n[4]  {dairy produce,                                                                                           \n      non-alc. drinks,                                                                                         \n      poultry,                                                                                                 \n      sausage}                    => {bread and backed goods} 0.004067107  0.8163265 0.004982206 2.362734    40\n[5]  {dairy produce,                                                                                           \n      poultry,                                                                                                 \n      staple foods}               => {vegetables}             0.003965430  0.8125000 0.004880529 2.976141    39\n[6]  {chocolate,                                                                                               \n      dairy produce,                                                                                           \n      fruit,                                                                                                   \n      non-alc. drinks,                                                                                         \n      sausage}                    => {bread and backed goods} 0.004372140  0.8113208 0.005388917 2.348246    43\n[7]  {beef,                                                                                                    \n      dairy produce,                                                                                           \n      fruit,                                                                                                   \n      pork}                       => {vegetables}             0.003457041  0.8095238 0.004270463 2.965239    34\n[8]  {dairy produce,                                                                                           \n      fruit,                                                                                                   \n      non-alc. drinks,                                                                                         \n      sausage,                                                                                                 \n      vinegar/oils}               => {bread and backed goods} 0.003863752  0.8085106 0.004778851 2.340112    38\n[9]  {chocolate,                                                                                               \n      dairy produce,                                                                                           \n      long-life bakery products,                                                                               \n      sausage}                    => {bread and backed goods} 0.004270463  0.8076923 0.005287239 2.337744    42\n[10] {chocolate,                                                                                               \n      dairy produce,                                                                                           \n      non-alc. drinks,                                                                                         \n      sausage}                    => {bread and backed goods} 0.007015760  0.8023256 0.008744281 2.322211    69\n\n\nNOTE The rules with products group dairy produce in an antecedent have also relatively high confidence, and additionally in consequence are products groups with highest support like bread and backed goods & vegetables (quite big \\(sup(X->Y)\\)) - 3 out of 258 rules as example:\n\ninspect(\n  sort(\n    subset(rules_groc_lvl2, subset = lhs %in% \"bread and backed goods\" & confidence > 0.80), \n    by = \"confidence\")[c(1, 129, 258)])\n\n    lhs                          rhs                 support confidence    coverage     lift count\n[1] {bread and backed goods,                                                                      \n     cheese,                                                                                      \n     fruit,                                                                                       \n     non-alc. drinks,                                                                             \n     perfumery}               => {dairy produce} 0.003050330  0.9677419 0.003152008 2.184471    30\n[2] {bread and backed goods,                                                                      \n     cheese,                                                                                      \n     frozen foods,                                                                                \n     sausage,                                                                                     \n     vegetables}              => {dairy produce} 0.003457041  0.8500000 0.004067107 1.918694    34\n[3] {bread and backed goods,                                                                      \n     perfumery,                                                                                   \n     vegetables}              => {dairy produce} 0.013523132  0.8012048 0.016878495 1.808549   133\n\n\nFUN FACT If there is an item from the products group bread and backed goods in the antecedent, the item he products group dairy produce will occur in consequent with confidence > 0,80 (there are 258 such rules). The above list shows also that if item from products group dairy produce occurred in the consequent, that with confidence > 0,80 as antecedent will be bread and backed goods and vegetables.\n\ninspect(sort(rules_groc_lvl2, by = \"support\")[1:10])\n\n     lhs                         rhs                      support   confidence\n[1]  {bread and backed goods} => {dairy produce}          0.1876970 0.5432607 \n[2]  {dairy produce}          => {bread and backed goods} 0.1876970 0.4236860 \n[3]  {vegetables}             => {dairy produce}          0.1704118 0.6242086 \n[4]  {dairy produce}          => {vegetables}             0.1704118 0.3846683 \n[5]  {fruit}                  => {dairy produce}          0.1563803 0.6277551 \n[6]  {dairy produce}          => {fruit}                  0.1563803 0.3529952 \n[7]  {non-alc. drinks}        => {dairy produce}          0.1519065 0.4777742 \n[8]  {dairy produce}          => {non-alc. drinks}        0.1519065 0.3428965 \n[9]  {non-alc. drinks}        => {bread and backed goods} 0.1242501 0.3907899 \n[10] {bread and backed goods} => {non-alc. drinks}        0.1242501 0.3596233 \n     coverage  lift     count\n[1]  0.3455008 1.226295 1846 \n[2]  0.4430097 1.226295 1846 \n[3]  0.2730046 1.409018 1676 \n[4]  0.4430097 1.409018 1676 \n[5]  0.2491103 1.417024 1538 \n[6]  0.4430097 1.417024 1538 \n[7]  0.3179461 1.078474 1494 \n[8]  0.4430097 1.078474 1494 \n[9]  0.3179461 1.131083 1222 \n[10] 0.3455008 1.131083 1222 \n\n\n\n\n\n\n\n\nReminder\n\n\n\nIt the value of relative support = x for the rule, which means that x transactions contain products listed in the LHS and RHS.\n\n\n\nthe rule of relative support of 0.18 eans that in 18% of transactions there are items from products groups dairy produce & bread and backed goods (here: what is the successor and what is the antecedent is not important) (rule [1], [2]),\nthe rule of relative support of 0.17 eans that in 17% of transactions there are items from products groups vegetables & dairy produce (here: what is the successor and what is the antecedent is not important) (rules [3], [4]),\nthe rule of relative support of 0.156 eans that in 15.6% of transactions there are items from products groups fruit & dairy produce (here: what is the successor and what is the antecedent is not important) (rule [5], [6]),\nthe rule of relative support of 0.152 eans that in 15.2% of transactions there are items from products groups non-alc. drinks & dairy produce (here: what is the successor and what is the antecedent is not important) (rule [7], [8]),\nthe rule of relative support of 0.124 eans that in 12.4% of transactions there are items from products groups non-alc. drinks & bread and backed goods (here: what is the successor and what is the antecedent is not important) (rule [9], [10]).\n\nThe above rules are built from product groups with the highest support (frequent items give frequent rules). But to find the answer to the question which departments of the store should be developed, rule confidence has to be analysed (the purchase of which product groups determines the purchase of other groups).\nQuality of received rules (overview)\n\nplot_boxplot(tab_src = quality(rules_groc_lvl2)[\"support\"], box_col = col_0, ylim = c(0, 0.02))\n\n\n\n\nBoxplot of quality measures - support\n\n\n\n\n\nplot_boxplot(tab_src = quality(rules_groc_lvl2)[\"confidence\"], box_col = col_2, ylim = c(0, 1.2))\n\n\n\n\nBoxplot of quality measures - confidence\n\n\n\n\n\nplot_boxplot(tab_src = quality(rules_groc_lvl2)[\"lift\"], box_col = col_4, ylim = c(0, 10))\n\n\n\n\nBoxplot of quality measures - lift\n\n\n\n\nConclusions on rule quality\n\nMax value of relative support is 18.8% (absolute support 1846), average value is 0.7% (71.0) - which almost coincides with the 3/4 quantile\nMax value of confidence is 100%, and min = 20%, average value is 51% (it can be said that in 1 out of 2 cases, after purchasing LHS items, RHS items are purchased)\nMax value of lift is 9.16, but it is an outlier. Average value is 2,25 (Over 3.5, outliers start)"
  },
  {
    "objectID": "posts/Groceries/index.html#model-apriori-for-items---2nd-approach",
    "href": "posts/Groceries/index.html#model-apriori-for-items---2nd-approach",
    "title": "Association Rules in Groceries",
    "section": "3.3 Model apriori for items - 2nd approach",
    "text": "3.3 Model apriori for items - 2nd approach\nAssumptions:\n\nassumed \\(minSup = 0.03\\) means that item must have absolute support over 295 transactions\nassumed \\(minConf = 0.2\\) means that if LHS contains selected item that 20% of RHS will follow the rule\nassumed \\(minLen = 2\\) means that rule has to have minimum two items\n\n\nplot_barplot(tab_src = table(size(rules_groc)), xlab = \"lenght of rule\")\n\n\n\n\nLength of the associate rules = LHS+RHS (products)\n\n\n\n\nSummary:\n\n25 association rules were found for the requested search parameters\nall rules have a length (LHS+RHS) of 2 (elements)\n\n\ninspect(sort(rules_groc_new, by = \"lift\")[1:10])\n\n     lhs                     rhs                support    confidence\n[1]  {root vegetables}    => {other vegetables} 0.04738180 0.4347015 \n[2]  {other vegetables}   => {root vegetables}  0.04738180 0.2448765 \n[3]  {sausage}            => {rolls/buns}       0.03060498 0.3257576 \n[4]  {tropical fruit}     => {other vegetables} 0.03589222 0.3420543 \n[5]  {whipped/sour cream} => {whole milk}       0.03223183 0.4496454 \n[6]  {root vegetables}    => {whole milk}       0.04890696 0.4486940 \n[7]  {yogurt}             => {other vegetables} 0.04341637 0.3112245 \n[8]  {other vegetables}   => {yogurt}           0.04341637 0.2243826 \n[9]  {tropical fruit}     => {whole milk}       0.04229792 0.4031008 \n[10] {yogurt}             => {whole milk}       0.05602440 0.4016035 \n     coverage   lift     count\n[1]  0.10899847 2.246605 466  \n[2]  0.19349263 2.246605 466  \n[3]  0.09395018 1.771048 301  \n[4]  0.10493137 1.767790 353  \n[5]  0.07168277 1.759754 317  \n[6]  0.10899847 1.756031 481  \n[7]  0.13950178 1.608457 427  \n[8]  0.19349263 1.608457 427  \n[9]  0.10493137 1.577595 416  \n[10] 0.13950178 1.571735 551  \n\n\n\n\n\n\n\n\nReminder\n\n\n\nIf the value lift = x for given rule, it means that items from LHS and RHS occur with each other x times more often compared to transactions, where these items occur independently.\n\n\n\nroot vegetables & other vegetablesare purchased 2.2 times more often together than separately (this rule has the same values of support and lift regardless of the order, depending on the order - different confidence differing twice) (rule [1], [2])\nsausage & rolls/buns are purchased 1.77 times more often together than separately (rule [3]),\ntropical fruit & other vegetables are purchased 1.77 times more often together than separately (rule [4]).\n\nNOTE These rules are made up of frequent products only (exception: [3] where LHS = sausage)\nComparing the rules in the 1st approach - the decrease in value of lift is noticeable (in 1st approach it was over 4.9, now max 2.2)\n\ninspect(sort(rules_groc_new, by = \"confidence\")[1:10])\n\n     lhs                     rhs                support    confidence\n[1]  {whipped/sour cream} => {whole milk}       0.03223183 0.4496454 \n[2]  {root vegetables}    => {whole milk}       0.04890696 0.4486940 \n[3]  {root vegetables}    => {other vegetables} 0.04738180 0.4347015 \n[4]  {tropical fruit}     => {whole milk}       0.04229792 0.4031008 \n[5]  {yogurt}             => {whole milk}       0.05602440 0.4016035 \n[6]  {pip fruit}          => {whole milk}       0.03009659 0.3978495 \n[7]  {other vegetables}   => {whole milk}       0.07483477 0.3867578 \n[8]  {pastry}             => {whole milk}       0.03324860 0.3737143 \n[9]  {citrus fruit}       => {whole milk}       0.03050330 0.3685504 \n[10] {tropical fruit}     => {other vegetables} 0.03589222 0.3420543 \n     coverage   lift     count\n[1]  0.07168277 1.759754 317  \n[2]  0.10899847 1.756031 481  \n[3]  0.10899847 2.246605 466  \n[4]  0.10493137 1.577595 416  \n[5]  0.13950178 1.571735 551  \n[6]  0.07564820 1.557043 296  \n[7]  0.19349263 1.513634 736  \n[8]  0.08896797 1.462587 327  \n[9]  0.08276563 1.442377 300  \n[10] 0.10493137 1.767790 353  \n\n\n\n\n\n\n\n\nReminder\n\n\n\nIt the value of confidence = x for the rule, which means that every time when items form LHS was in transaction, x times of them contains also items form RHS.\n\\(conf(X->Y)\\) may be interpreted as conditional probability \\(P(Y|X)\\)\n\n\n\nif whipped/sour cream then in 45% of transactions also whole milk (rule [1]),\nif root vegetables then in 44.9% of transaction also whole milk (rule [2]),\nif root vegetables then in 43.4% of transaction also other vegetables (rule [3]).\n\nComparing the rules in the 1st approach - the decrease in value of confidence is noticeable (in 1st approach it was over 70%, now max 45%)\n\ninspect(sort(rules_groc_new, by = \"support\")[1:10])\n\n     lhs                   rhs                support    confidence coverage \n[1]  {other vegetables} => {whole milk}       0.07483477 0.3867578  0.1934926\n[2]  {whole milk}       => {other vegetables} 0.07483477 0.2928770  0.2555160\n[3]  {rolls/buns}       => {whole milk}       0.05663447 0.3079049  0.1839349\n[4]  {whole milk}       => {rolls/buns}       0.05663447 0.2216474  0.2555160\n[5]  {yogurt}           => {whole milk}       0.05602440 0.4016035  0.1395018\n[6]  {whole milk}       => {yogurt}           0.05602440 0.2192598  0.2555160\n[7]  {root vegetables}  => {whole milk}       0.04890696 0.4486940  0.1089985\n[8]  {root vegetables}  => {other vegetables} 0.04738180 0.4347015  0.1089985\n[9]  {other vegetables} => {root vegetables}  0.04738180 0.2448765  0.1934926\n[10] {yogurt}           => {other vegetables} 0.04341637 0.3112245  0.1395018\n     lift     count\n[1]  1.513634 736  \n[2]  1.513634 736  \n[3]  1.205032 557  \n[4]  1.205032 557  \n[5]  1.571735 551  \n[6]  1.571735 551  \n[7]  1.756031 481  \n[8]  2.246605 466  \n[9]  2.246605 466  \n[10] 1.608457 427  \n\n\n\n\n\n\n\n\nReminder\n\n\n\nIt the value of relative support = x for the rule, which means that x transactions contain products listed in the LHS and RHS.\n\n\n\nrule whole milk <=> other vegetables of relative support of 0.075 means that whole milk i other vegetables appear together in 7.5% of transactions (here: what is the successor and what is the antecedent is not important) (rule [1], [2]),\nrule rolls/buns <=> yogurt of relative support of 0.057 means that rolls/buns & yogurt appear together in 5.7% of transactions (here: what is the successor and what is the antecedent is not important) (rule [3], [4]).\n\nThe above rules - except that there is no empty set rule - are the same as obtained in the 1st approach\nValidation\n\nfor rules [1] i [2] - support of 736 transactions with items other vegetables & whole milk (chosen 3 examples)\n\n\ninspect(\n  subset(\n    subset(Groceries, items %in% \"other vegetables\"), \n    items %in% \"whole milk\")[c(1, 368, 736)])\n\n    items                     \n[1] {other vegetables,        \n     whole milk,              \n     condensed milk,          \n     long life bakery product}\n[2] {liver loaf,              \n     root vegetables,         \n     other vegetables,        \n     whole milk,              \n     frozen vegetables,       \n     margarine}               \n[3] {frankfurter,             \n     tropical fruit,          \n     other vegetables,        \n     whole milk,              \n     frozen meals,            \n     rolls/buns,              \n     detergent,               \n     napkins,                 \n     newspapers}              \n\n\n\nfor rules [3] i [4] - support of 557 transactions with items rolls/buns & whole milk (chosen 3 examples)\n\n\ninspect(\n  subset(\n    subset(Groceries, items %in% \"rolls/buns\"), \n    items %in% \"whole milk\")[c(1, 278, 557)])\n\n    items                    \n[1] {tropical fruit,         \n     pip fruit,              \n     berries,                \n     whole milk,             \n     frozen potato products, \n     rolls/buns,             \n     pickled vegetables,     \n     chocolate}              \n[2] {citrus fruit,           \n     tropical fruit,         \n     pip fruit,              \n     root vegetables,        \n     onions,                 \n     other vegetables,       \n     whole milk,             \n     yogurt,                 \n     rolls/buns,             \n     brown bread,            \n     soda,                   \n     fruit/vegetable juice}  \n[3] {frankfurter,            \n     tropical fruit,         \n     other vegetables,       \n     whole milk,             \n     frozen meals,           \n     rolls/buns,             \n     detergent,              \n     napkins,                \n     newspapers}             \n\n\nCONCLUSIONS\nIncreasing the value of the minimum relative support\\(minrSup = 0.03\\) caused shortening of the rules - to 2 items: one antecedent and one consequence. However, it did not fundamentally change the list of rules according to the absolute support. The rules filtered by the values fo list and confidence contain the most frequent items. The change in relation to the statements obtained in the 1st approach resulting from the required greater support of an antecedent (for \\(conf = P(XY) / P(X)\\) and for \\(lift = P(XY)/ [P(X) * P(Y)]\\))."
  },
  {
    "objectID": "posts/Groceries/index.html#model-apriori-for-products-group---2nd-approach",
    "href": "posts/Groceries/index.html#model-apriori-for-products-group---2nd-approach",
    "title": "Association Rules in Groceries",
    "section": "3.4 Model apriori for products group - 2nd approach",
    "text": "3.4 Model apriori for products group - 2nd approach\nAssumptions:\n\nassumed \\(minSup = 0.03\\) means that products group must have absolute support over 295 transactions\nassumed \\(minConf = 0.2\\) means that if LHS contains selected products group that 20% of RHS will follow the rule\n\n\nplot_barplot(tab_src = table(size(rules_groc_lvl2_new)), xlab = \"lengthof rule\")\n\n\n\n\nLength of the associate rules = LHS+RHS (products group)\n\n\n\n\nSummary:\n\n193 association rules were found for the requested search parameters\n44.5% rules - 86 z 193 - have a length (LHS+RHS) of 2 (2 elements)\n43% rules - 83 z 193 - have a length (LHS+RHS) of 3 (3 elements)\nother rules have a length (LHS+RHS) of 4 (4 elements)\n\n\ninspect(sort(rules_groc_lvl2_new, by = \"lift\")[1:10])\n\n     lhs                          rhs             support confidence   coverage     lift count\n[1]  {dairy produce,                                                                          \n      sausage}                 => {cheese}     0.03111337  0.2897727 0.10737163 2.287251   306\n[2]  {bread and backed goods,                                                                 \n      dairy produce,                                                                          \n      vegetables}              => {sausage}    0.03284189  0.4007444 0.08195221 2.118990   323\n[3]  {bread and backed goods,                                                                 \n      dairy produce,                                                                          \n      fruit}                   => {sausage}    0.03060498  0.3960526 0.07727504 2.094182   301\n[4]  {dairy produce,                                                                          \n      non-alc. drinks,                                                                        \n      vegetables}              => {fruit}      0.03304525  0.5126183 0.06446365 2.057796   325\n[5]  {beef}                    => {vegetables} 0.04585663  0.5595533 0.08195221 2.049612   451\n[6]  {dairy produce,                                                                          \n      fruit}                   => {cheese}     0.03965430  0.2535761 0.15638027 2.001541   390\n[7]  {bread and backed goods,                                                                 \n      dairy produce,                                                                          \n      vegetables}              => {fruit}      0.04077275  0.4975186 0.08195221 1.997182   401\n[8]  {bread and backed goods,                                                                 \n      vegetables}              => {sausage}    0.04382308  0.3770779 0.11621759 1.993850   431\n[9]  {dairy produce,                                                                          \n      vinegar/oils}            => {vegetables} 0.03141840  0.5355286 0.05866802 1.961610   309\n[10] {bread and backed goods,                                                                 \n      dairy produce,                                                                          \n      non-alc. drinks}         => {fruit}      0.03528216  0.4880450 0.07229283 1.959152   347\n\n\n\n\n\n\n\n\nReminder\n\n\n\nIf the value lift = x for given rule, it means that items from LHS and RHS occur with each other x times more often compared to transactions, where these items occur independently.\n\n\n\nproducts groups dairy produce & sausage with cheese are purchased 2.3 times more often together than separately (applies to LHS and RHS) (rule [1]),\nproducts groups bread and backed goods, dairy produce, vegetables & sausage are purchased 2.1 times more often together than separately (rule [2]),\nproducts groups bread and backed goods, dairy produce & fruit together withsausage are purchased 2.1 times more often together than separately (rule [3]).\n\nValues for lift are on average lower than in the 1st approach (max 9.1 vs max 2.3). However, the differences in value are not as significant as in the case of items.\n\ninspect(sort(rules_groc_lvl2_new, by = \"confidence\")[1:10])\n\n     lhs                          rhs                support confidence   coverage     lift count\n[1]  {bread and backed goods,                                                                    \n      fruit,                                                                                     \n      sausage}                 => {dairy produce} 0.03060498  0.7984085 0.03833249 1.802237   301\n[2]  {bread and backed goods,                                                                    \n      fruit,                                                                                     \n      vegetables}              => {dairy produce} 0.04077275  0.7956349 0.05124555 1.795976   401\n[3]  {cheese,                                                                                    \n      fruit}                   => {dairy produce} 0.03965430  0.7707510 0.05144891 1.739806   390\n[4]  {cheese,                                                                                    \n      vegetables}              => {dairy produce} 0.04219624  0.7628676 0.05531266 1.722011   415\n[5]  {fruit,                                                                                     \n      non-alc. drinks,                                                                           \n      vegetables}              => {dairy produce} 0.03304525  0.7575758 0.04361973 1.710066   325\n[6]  {bread and backed goods,                                                                    \n      sausage,                                                                                   \n      vegetables}              => {dairy produce} 0.03284189  0.7494200 0.04382308 1.691656   323\n[7]  {vegetables,                                                                                \n      vinegar/oils}            => {dairy produce} 0.03141840  0.7481840 0.04199288 1.688866   309\n[8]  {bread and backed goods,                                                                    \n      fruit,                                                                                     \n      non-alc. drinks}         => {dairy produce} 0.03528216  0.7430407 0.04748348 1.677256   347\n[9]  {frozen foods,                                                                              \n      fruit}                   => {dairy produce} 0.03070666  0.7401961 0.04148449 1.670835   302\n[10] {fruit,                                                                                     \n      vegetables}              => {dairy produce} 0.07869853  0.7350427 0.10706660 1.659203   774\n\n\n\n\n\n\n\n\nReminder\n\n\n\nIt the value of confidence = x for the rule, which means that every time when items form LHS was in transaction, x times of them contains also items form RHS.\n\\(conf(X->Y)\\) may be interpreted as conditional probability \\(P(Y|X)\\)\n\n\n\nif products groups bread and backed goods, fruit & sausage then in 80% of transaction also dairy produce (rule [1]),\nif products groups bread and backed goods, fruits & vegetables then in 80% of transaction also dairy produce (rule [2])\nif products groups cheese & fruit then in 77% of transaction also dairy produce (regu≈Çy [3]).\n\nNOTE These rules are made of frequent items. Compared to the rules of the 1st approach. a consequence is the same (dairy produce) while some of the antecedents have changed (higher support required). These rules also have lower confidence (it was over 95%, now is lower than 80%)\nNOTE While dairy produce occurs in 44% of transactions - it builds high-confidence rules when in a consequence.\n\ninspect(sort(rules_groc_lvl2_new, by = \"support\")[1:10])\n\n     lhs                         rhs                      support   confidence\n[1]  {bread and backed goods} => {dairy produce}          0.1876970 0.5432607 \n[2]  {dairy produce}          => {bread and backed goods} 0.1876970 0.4236860 \n[3]  {vegetables}             => {dairy produce}          0.1704118 0.6242086 \n[4]  {dairy produce}          => {vegetables}             0.1704118 0.3846683 \n[5]  {fruit}                  => {dairy produce}          0.1563803 0.6277551 \n[6]  {dairy produce}          => {fruit}                  0.1563803 0.3529952 \n[7]  {non-alc. drinks}        => {dairy produce}          0.1519065 0.4777742 \n[8]  {dairy produce}          => {non-alc. drinks}        0.1519065 0.3428965 \n[9]  {non-alc. drinks}        => {bread and backed goods} 0.1242501 0.3907899 \n[10] {bread and backed goods} => {non-alc. drinks}        0.1242501 0.3596233 \n     coverage  lift     count\n[1]  0.3455008 1.226295 1846 \n[2]  0.4430097 1.226295 1846 \n[3]  0.2730046 1.409018 1676 \n[4]  0.4430097 1.409018 1676 \n[5]  0.2491103 1.417024 1538 \n[6]  0.4430097 1.417024 1538 \n[7]  0.3179461 1.078474 1494 \n[8]  0.4430097 1.078474 1494 \n[9]  0.3179461 1.131083 1222 \n[10] 0.3455008 1.131083 1222 \n\n\n\n\n\n\n\n\nReminder\n\n\n\nIt the value of relative support = x for the rule, which means that x transactions contain products listed in the LHS and RHS.\n\n\n\nthe rule of relative support of 0.18 means that in 18% of transactions there is dairy produce & bread and backed goods (here: what is the successor and what is the antecedent is not important) (rule [1], [2]).\n\nThe above rules - except that there is no empty set rule - are the same as obtained in the 1st approach."
  },
  {
    "objectID": "posts/Groceries/index.html#model-apriori-for-items---3rd-approach",
    "href": "posts/Groceries/index.html#model-apriori-for-items---3rd-approach",
    "title": "Association Rules in Groceries",
    "section": "3.5 Model apriori for items - 3rd approach",
    "text": "3.5 Model apriori for items - 3rd approach\nAssumptions:\n\nassumed \\(minSup = 0.003\\) means that item must have absolute support over 29 transactions\nassumed \\(minConf = 0.5\\) means that if LHS contains selected item that 50% of RHS will follow the rule\n\n\nplot_barplot(tab_src = table(size(rules_groc_new_3)))\n\n\n\n\nLength of the associate rules = LHS+RHS (products)\n\n\n\n\nSummary:\n\n421 association rules were found for the requested search parameters\n66.7% rules - 281 z 421 - have a length (LHS+RHS) of 3 (3 elements)\n30% rules - 128 z 421 - have a length (LHS+RHS) of 4 (4 elements)\n\n\ninspect(sort(rules_groc_new_3, by = \"lift\")[1:10])\n\n     lhs                     rhs                    support confidence    coverage     lift count\n[1]  {citrus fruit,                                                                              \n      tropical fruit,                                                                            \n      other vegetables,                                                                          \n      whole milk}         => {root vegetables}  0.003152008  0.6326531 0.004982206 5.804238    31\n[2]  {citrus fruit,                                                                              \n      root vegetables,                                                                           \n      other vegetables,                                                                          \n      whole milk}         => {tropical fruit}   0.003152008  0.5438596 0.005795628 5.183004    31\n[3]  {herbs,                                                                                     \n      whole milk}         => {root vegetables}  0.004168785  0.5394737 0.007727504 4.949369    41\n[4]  {herbs,                                                                                     \n      other vegetables}   => {root vegetables}  0.003863752  0.5000000 0.007727504 4.587220    38\n[5]  {citrus fruit,                                                                              \n      tropical fruit,                                                                            \n      root vegetables,                                                                           \n      whole milk}         => {other vegetables} 0.003152008  0.8857143 0.003558719 4.577509    31\n[6]  {tropical fruit,                                                                            \n      whole milk,                                                                                \n      curd}               => {yogurt}           0.003965430  0.6093750 0.006507372 4.368224    39\n[7]  {citrus fruit,                                                                              \n      tropical fruit,                                                                            \n      root vegetables}    => {other vegetables} 0.004473818  0.7857143 0.005693950 4.060694    44\n[8]  {tropical fruit,                                                                            \n      other vegetables,                                                                          \n      butter}             => {yogurt}           0.003050330  0.5555556 0.005490595 3.982426    30\n[9]  {tropical fruit,                                                                            \n      whole milk,                                                                                \n      whipped/sour cream} => {yogurt}           0.004372140  0.5512821 0.007930859 3.951792    43\n[10] {tropical fruit,                                                                            \n      whole milk,                                                                                \n      butter}             => {yogurt}           0.003355363  0.5409836 0.006202339 3.877969    33\n\n\n\n\n\n\n\n\nReminder\n\n\n\nIf the value lift = x for given rule, it means that items from LHS and RHS occur with each other x times more often compared to transactions, where these items occur independently.\n\n\n\ncitrus fruit, tropical fruit, other vegetables, whole milk & root vegetables are purchased 5.8 times more often together than separately (rule [1]),\ncitrus fruit, root vegetables, other vegetables, whole milk & tropical fruit are purchased 5.2 times more often together than separately (rule [2),\nherbs, whole milk & root vegetables are purchased 4.9 times more often together than separately (rule [3]).\n\nNOTE These rules are built mainly of frequent items, but there are also items with significant ones lower support (but with frequent product groups)\n\ninspect(sort(rules_groc_new_3, by = \"confidence\")[1:10])\n\n     lhs                     rhs                    support confidence    coverage     lift count\n[1]  {citrus fruit,                                                                              \n      tropical fruit,                                                                            \n      root vegetables,                                                                           \n      whole milk}         => {other vegetables} 0.003152008  0.8857143 0.003558719 4.577509    31\n[2]  {root vegetables,                                                                           \n      butter,                                                                                    \n      yogurt}             => {whole milk}       0.003050330  0.7894737 0.003863752 3.089723    30\n[3]  {citrus fruit,                                                                              \n      tropical fruit,                                                                            \n      root vegetables}    => {other vegetables} 0.004473818  0.7857143 0.005693950 4.060694    44\n[4]  {root vegetables,                                                                           \n      other vegetables,                                                                          \n      brown bread}        => {whole milk}       0.003152008  0.7750000 0.004067107 3.033078    31\n[5]  {onions,                                                                                    \n      butter}             => {whole milk}       0.003050330  0.7500000 0.004067107 2.935237    30\n[6]  {tropical fruit,                                                                            \n      curd,                                                                                      \n      yogurt}             => {whole milk}       0.003965430  0.7500000 0.005287239 2.935237    39\n[7]  {curd,                                                                                      \n      domestic eggs}      => {whole milk}       0.004778851  0.7343750 0.006507372 2.874086    47\n[8]  {tropical fruit,                                                                            \n      butter,                                                                                    \n      yogurt}             => {whole milk}       0.003355363  0.7333333 0.004575496 2.870009    33\n[9]  {tropical fruit,                                                                            \n      root vegetables,                                                                           \n      whipped/sour cream} => {other vegetables} 0.003355363  0.7333333 0.004575496 3.789981    33\n[10] {butter,                                                                                    \n      curd}               => {whole milk}       0.004880529  0.7164179 0.006812405 2.803808    48\n\n\n\n\n\n\n\n\nReminder\n\n\n\nIt the value of confidence = x for the rule, which means that every time when items form LHS was in transaction, x times of them contains also items form RHS.\n\\(conf(X->Y)\\) may be interpreted as conditional probability \\(P(Y|X)\\)\n\n\n\nif citrus fruit, tropical fruit, root vegetables & whole milk then in 88% of transaction also other vegetables (rule [1]),\nif root vegetables, butter & yogurt then in 79% of transaction also whole milk (rule [2]),\nif citrus fruit, tropical fruit & root vegetables then in 79% of transaction also whole milk (rule [3]).\n\nComparison of rules in the 1st approach - the same rules were obtained.\n\ninspect(sort(rules_groc_new_3, by = \"support\")[1:10])\n\n     lhs                                       rhs                support   \n[1]  {other vegetables, yogurt}             => {whole milk}       0.02226741\n[2]  {tropical fruit, yogurt}               => {whole milk}       0.01514997\n[3]  {other vegetables, whipped/sour cream} => {whole milk}       0.01464159\n[4]  {root vegetables, yogurt}              => {whole milk}       0.01453991\n[5]  {pip fruit, other vegetables}          => {whole milk}       0.01352313\n[6]  {root vegetables, yogurt}              => {other vegetables} 0.01291307\n[7]  {root vegetables, rolls/buns}          => {whole milk}       0.01270971\n[8]  {other vegetables, domestic eggs}      => {whole milk}       0.01230300\n[9]  {tropical fruit, root vegetables}      => {other vegetables} 0.01230300\n[10] {root vegetables, rolls/buns}          => {other vegetables} 0.01220132\n     confidence coverage   lift     count\n[1]  0.5128806  0.04341637 2.007235 219  \n[2]  0.5173611  0.02928317 2.024770 149  \n[3]  0.5070423  0.02887646 1.984385 144  \n[4]  0.5629921  0.02582613 2.203354 143  \n[5]  0.5175097  0.02613116 2.025351 133  \n[6]  0.5000000  0.02582613 2.584078 127  \n[7]  0.5230126  0.02430097 2.046888 125  \n[8]  0.5525114  0.02226741 2.162336 121  \n[9]  0.5845411  0.02104728 3.020999 121  \n[10] 0.5020921  0.02430097 2.594890 120  \n\n\n\n\n\n\n\n\nReminder\n\n\n\nIt the value of relative support = x for the rule, which means that x transactions contain products listed in the LHS and RHS.\n\n\n\nrule other vegetables & yogurt => whole milk has relative support equals 0,022, which means that these items come together in 2,2% of transactions (rule [1]),\nrule tropical fruit & yogurt => whole milk has relative support equals 0,015, which means that these items come together in 1,5% of transactions (rule [2]).\n\nFUN FACT The above rules have confidnece over 50%, that is, they are true for half of the purchases containing LHS!\nNOTE The rules above are completely different from those obtained in the 1st attempt and the 2nd approach."
  },
  {
    "objectID": "posts/Groceries/index.html#model-apriori-for-products-group---3rd-approach",
    "href": "posts/Groceries/index.html#model-apriori-for-products-group---3rd-approach",
    "title": "Association Rules in Groceries",
    "section": "3.6 Model apriori for products group - 3rd approach",
    "text": "3.6 Model apriori for products group - 3rd approach\nAssumptions:\n\nassumed \\(minSup = 0.003\\) means that products group must have absolute support over 29 transactions\nassumed \\(minConf = 0.5\\) means that if LHS contains selected products group that 50% of RHS will follow the rule\n\n\nplot_barplot(tab_src =table(size(rules_groc_lvl2_new_3)), xlab = \"length of rule\")\n\n\n\n\nLength of the associate rules = LHS+RHS (products group)\n\n\n\n\nSummary:\n\n4417 association rules were found for the requested search parameters\n44.5% rules - 2007 z 4417 - have a length (LHS+RHS) of 4 (4 elements)\n1225 (27,7%) & 884 (20%) have - appropriate - length of 3 i 5\n\n\ninspect(sort(rules_groc_lvl2_new_3, by = \"lift\")[1:10])\n\n     lhs                          rhs           support confidence    coverage     lift count\n[1]  {dairy produce,                                                                         \n      fruit,                                                                                 \n      sausage,                                                                               \n      vegetables,                                                                            \n      vinegar/oils}            => {cheese}  0.003152008  0.5438596 0.005795628 4.292825    31\n[2]  {fruit,                                                                                 \n      sausage,                                                                               \n      vegetables,                                                                            \n      vinegar/oils}            => {cheese}  0.003457041  0.5151515 0.006710727 4.066224    34\n[3]  {bread and backed goods,                                                                \n      eggs,                                                                                  \n      fruit,                                                                                 \n      sausage}                 => {cheese}  0.003253686  0.5079365 0.006405694 4.009274    32\n[4]  {dairy produce,                                                                         \n      frozen foods,                                                                          \n      fruit,                                                                                 \n      non-alc. drinks,                                                                       \n      sausage}                 => {cheese}  0.003558719  0.5000000 0.007117438 3.946629    35\n[5]  {bread and backed goods,                                                                \n      cheese,                                                                                \n      chocolate,                                                                             \n      fruit}                   => {sausage} 0.003863752  0.6333333 0.006100661 3.348835    38\n[6]  {bread and backed goods,                                                                \n      cheese,                                                                                \n      frozen foods,                                                                          \n      fruit}                   => {sausage} 0.004677173  0.6301370 0.007422471 3.331934    46\n[7]  {bread and backed goods,                                                                \n      cheese,                                                                                \n      chocolate,                                                                             \n      dairy produce,                                                                         \n      non-alc. drinks}         => {sausage} 0.003253686  0.6274510 0.005185562 3.317731    32\n[8]  {bread and backed goods,                                                                \n      cheese,                                                                                \n      dairy produce,                                                                         \n      poultry}                 => {sausage} 0.003050330  0.6250000 0.004880529 3.304772    30\n[9]  {bread and backed goods,                                                                \n      chocolate,                                                                             \n      frozen foods,                                                                          \n      non-alc. drinks}         => {sausage} 0.003050330  0.6250000 0.004880529 3.304772    30\n[10] {bread and backed goods,                                                                \n      cheese,                                                                                \n      chocolate,                                                                             \n      dairy produce,                                                                         \n      fruit}                   => {sausage} 0.003152008  0.6200000 0.005083884 3.278333    31\n\n\n\n\n\n\n\n\nReminder\n\n\n\nIf the value lift = x for given rule, it means that items from LHS and RHS occur with each other x times more often compared to transactions, where these items occur independently.\n\n\n\nproducts groups dairy produce, fruit, sausage, vegetables, vinegar/oils and cheese are purchased 4.3 times more often together than separately (applies to LHS and RHS) (rule [1]),\nproducts groups fruit, sausage, vegetables, vinegar/oils and with cheese are purchased 4 times more often together than separately (rule [2]),\nproducts groups bread and backed goods, eggs, fruit and sausage together with cheese are purchased 4 times more often together than separately (rule [3]).\n\n\ninspect(sort(rules_groc_lvl2_new_3, by = \"confidence\")[1:10])\n\n     lhs                          rhs                 support confidence    coverage     lift count\n[1]  {chocolate,                                                                                   \n      fruit,                                                                                       \n      staple foods}            => {dairy produce} 0.003558719  1.0000000 0.003558719 2.257287    35\n[2]  {eggs,                                                                                        \n      fruit,                                                                                       \n      staple foods}            => {dairy produce} 0.003660397  0.9729730 0.003762074 2.196279    36\n[3]  {cheese,                                                                                      \n      eggs,                                                                                        \n      perfumery}               => {dairy produce} 0.003660397  0.9729730 0.003762074 2.196279    36\n[4]  {eggs,                                                                                        \n      fruit,                                                                                       \n      non-alc. drinks,                                                                             \n      vinegar/oils}            => {dairy produce} 0.003457041  0.9714286 0.003558719 2.192793    34\n[5]  {frozen foods,                                                                                \n      fruit,                                                                                       \n      non-alc. drinks,                                                                             \n      staple foods}            => {dairy produce} 0.003152008  0.9687500 0.003253686 2.186747    31\n[6]  {frozen foods,                                                                                \n      fruit,                                                                                       \n      non-alc. drinks,                                                                             \n      vinegar/oils}            => {dairy produce} 0.003050330  0.9677419 0.003152008 2.184471    30\n[7]  {bread and backed goods,                                                                      \n      cheese,                                                                                      \n      fruit,                                                                                       \n      non-alc. drinks,                                                                             \n      perfumery}               => {dairy produce} 0.003050330  0.9677419 0.003152008 2.184471    30\n[8]  {bread and backed goods,                                                                      \n      fruit,                                                                                       \n      pork,                                                                                        \n      sausage}                 => {dairy produce} 0.004880529  0.9600000 0.005083884 2.166996    48\n[9]  {bread and backed goods,                                                                      \n      cheese,                                                                                      \n      non-alc. drinks,                                                                             \n      perfumery}               => {dairy produce} 0.004270463  0.9545455 0.004473818 2.154683    42\n[10] {bread and backed goods,                                                                      \n      eggs,                                                                                        \n      fruit,                                                                                       \n      vinegar/oils}            => {dairy produce} 0.003863752  0.9500000 0.004067107 2.144423    38\n\n\n\n\n\n\n\n\nReminder\n\n\n\nIt the value of confidence = x for the rule, which means that every time when items form LHS was in transaction, x times of them contains also items form RHS.\n\\(conf(X->Y)\\) may be interpreted as conditional probability \\(P(Y|X)\\)\n\n\n\nif products groups chocolate, fruit & staple foods then in 100% of transaction also dairy produce (rule [1]),\nif products groups eggs, fruit & staple foods then in 97% of transaction also dairy produce (rule [2]),\nif products groups cheese, eggs & perfumery then in 97% of transaction also dairy produce (rule [3]).\n\nNOTE These rules were not necessarily made of frequent items - comparing to 1st approach and 2nd approach. but an consequence is the same (dairy produce). These rules have very high confidence - over 95%.\nNOTE Because products group dairy produce occurs in 44% of transactions - it builds high-confidence rules when in a consequence.\n\ninspect(sort(rules_groc_lvl2_new_3, by = \"support\")[1:10])\n\n     lhs                                     rhs                     \n[1]  {bread and backed goods}             => {dairy produce}         \n[2]  {vegetables}                         => {dairy produce}         \n[3]  {fruit}                              => {dairy produce}         \n[4]  {sausage}                            => {dairy produce}         \n[5]  {sausage}                            => {bread and backed goods}\n[6]  {cheese}                             => {dairy produce}         \n[7]  {bread and backed goods, vegetables} => {dairy produce}         \n[8]  {fruit, vegetables}                  => {dairy produce}         \n[9]  {dairy produce, fruit}               => {vegetables}            \n[10] {bread and backed goods, fruit}      => {dairy produce}         \n     support    confidence coverage  lift     count\n[1]  0.18769700 0.5432607  0.3455008 1.226295 1846 \n[2]  0.17041179 0.6242086  0.2730046 1.409018 1676 \n[3]  0.15638027 0.6277551  0.2491103 1.417024 1538 \n[4]  0.10737163 0.5677419  0.1891205 1.281557 1056 \n[5]  0.10360956 0.5478495  0.1891205 1.585668 1019 \n[6]  0.08459583 0.6677368  0.1266904 1.507274  832 \n[7]  0.08195221 0.7051619  0.1162176 1.591753  806 \n[8]  0.07869853 0.7350427  0.1070666 1.659203  774 \n[9]  0.07869853 0.5032510  0.1563803 1.843379  774 \n[10] 0.07727504 0.7183365  0.1075750 1.621492  760 \n\n\n\n\n\n\n\n\nReminder\n\n\n\nIt the value of relative support = x for the rule, which means that x transactions contain products listed in the LHS and RHS.\n\n\n\nthe rule of relative support of 0.18 means that in 18% of transactions there are items for products group dairy produce (rule [1]),\nthe rule of relative support of 0.17 means that in 17% of transactions there are items for products group vegetables i dairy produce (rule [2]).\n\nThe above rules have mainly products group dairy produce as consequence. In an antecedent they have mainly frequent item. The first 5 rules have high relative support (over 10%) and relatively high value of the confidence (0.55-0.63)."
  },
  {
    "objectID": "posts/Groceries/index.html#summary-dataset",
    "href": "posts/Groceries/index.html#summary-dataset",
    "title": "Association Rules in Groceries",
    "section": "4.1 Summary dataset",
    "text": "4.1 Summary dataset\nthe most frequent item:\n\ntab_freq[list_pop_products]\n\n      whole milk other vegetables       rolls/buns             soda \n       0.2555160        0.1934926        0.1839349        0.1743772 \n          yogurt    bottled water  root vegetables   tropical fruit \n       0.1395018        0.1105236        0.1089985        0.1049314 \n\n\nthe most frequent products group‚Ä¶\n\ntab_freq_lvl2[list_pop_gr_products]\n\n         dairy produce bread and backed goods        non-alc. drinks \n             0.4430097              0.3455008              0.3179461 \n            vegetables                  fruit                sausage \n             0.2730046              0.2491103              0.1891205 \n                  beer                 cheese           frozen foods \n             0.1555669              0.1266904              0.1169293 \n             chocolate \n             0.1087951 \n\n\n‚Ä¶with items:\n\nlist_lvl2$`dairy produce`; list_lvl2$`bread and backed goods`\n\n[1] \"whole milk\"         \"butter\"             \"curd\"              \n[4] \"dessert\"            \"butter milk\"        \"yogurt\"            \n[7] \"whipped/sour cream\" \"beverages\"         \n\n\n[1] \"rolls/buns\"          \"white bread\"         \"brown bread\"        \n[4] \"pastry\"              \"roll products \"      \"semi-finished bread\"\n[7] \"zwieback\""
  },
  {
    "objectID": "posts/Groceries/index.html#summary-regarding-the-conducted-experiments",
    "href": "posts/Groceries/index.html#summary-regarding-the-conducted-experiments",
    "title": "Association Rules in Groceries",
    "section": "4.2 Summary regarding the conducted experiments",
    "text": "4.2 Summary regarding the conducted experiments\nThree experiments were carried out - independently for items and products groups. For further analysis and final conclusions, a set of rules was selected thatwas created in the 3rd approach, due to the high trust value.\nRules with high value of the confidence for items\n\ninspect(sort(rules_groc_new_3, by = \"confidence\")[1:10])\n\n     lhs                     rhs                    support confidence    coverage     lift count\n[1]  {citrus fruit,                                                                              \n      tropical fruit,                                                                            \n      root vegetables,                                                                           \n      whole milk}         => {other vegetables} 0.003152008  0.8857143 0.003558719 4.577509    31\n[2]  {root vegetables,                                                                           \n      butter,                                                                                    \n      yogurt}             => {whole milk}       0.003050330  0.7894737 0.003863752 3.089723    30\n[3]  {citrus fruit,                                                                              \n      tropical fruit,                                                                            \n      root vegetables}    => {other vegetables} 0.004473818  0.7857143 0.005693950 4.060694    44\n[4]  {root vegetables,                                                                           \n      other vegetables,                                                                          \n      brown bread}        => {whole milk}       0.003152008  0.7750000 0.004067107 3.033078    31\n[5]  {onions,                                                                                    \n      butter}             => {whole milk}       0.003050330  0.7500000 0.004067107 2.935237    30\n[6]  {tropical fruit,                                                                            \n      curd,                                                                                      \n      yogurt}             => {whole milk}       0.003965430  0.7500000 0.005287239 2.935237    39\n[7]  {curd,                                                                                      \n      domestic eggs}      => {whole milk}       0.004778851  0.7343750 0.006507372 2.874086    47\n[8]  {tropical fruit,                                                                            \n      butter,                                                                                    \n      yogurt}             => {whole milk}       0.003355363  0.7333333 0.004575496 2.870009    33\n[9]  {tropical fruit,                                                                            \n      root vegetables,                                                                           \n      whipped/sour cream} => {other vegetables} 0.003355363  0.7333333 0.004575496 3.789981    33\n[10] {butter,                                                                                    \n      curd}               => {whole milk}       0.004880529  0.7164179 0.006812405 2.803808    48\n\n\nand their support:\n\ninspect(sort(rules_groc_new_3, by = \"support\")[1:10])\n\n     lhs                                       rhs                support   \n[1]  {other vegetables, yogurt}             => {whole milk}       0.02226741\n[2]  {tropical fruit, yogurt}               => {whole milk}       0.01514997\n[3]  {other vegetables, whipped/sour cream} => {whole milk}       0.01464159\n[4]  {root vegetables, yogurt}              => {whole milk}       0.01453991\n[5]  {pip fruit, other vegetables}          => {whole milk}       0.01352313\n[6]  {root vegetables, yogurt}              => {other vegetables} 0.01291307\n[7]  {root vegetables, rolls/buns}          => {whole milk}       0.01270971\n[8]  {other vegetables, domestic eggs}      => {whole milk}       0.01230300\n[9]  {tropical fruit, root vegetables}      => {other vegetables} 0.01230300\n[10] {root vegetables, rolls/buns}          => {other vegetables} 0.01220132\n     confidence coverage   lift     count\n[1]  0.5128806  0.04341637 2.007235 219  \n[2]  0.5173611  0.02928317 2.024770 149  \n[3]  0.5070423  0.02887646 1.984385 144  \n[4]  0.5629921  0.02582613 2.203354 143  \n[5]  0.5175097  0.02613116 2.025351 133  \n[6]  0.5000000  0.02582613 2.584078 127  \n[7]  0.5230126  0.02430097 2.046888 125  \n[8]  0.5525114  0.02226741 2.162336 121  \n[9]  0.5845411  0.02104728 3.020999 121  \n[10] 0.5020921  0.02430097 2.594890 120  \n\n\nPierwsza zale≈ºno≈õƒá (regu≈Çy sortowane wg wsparcia), rzucajƒÖca siƒô w oczy to, ≈ºe  if vegetables & fruit then also whole milk - sƒÖ to regu≈Çy z zaufaniem > 78,5%; w regu≈Çach o ni≈ºszym zaufaniu pojawiajƒÖ siƒô te≈º produkty z innych grup produkt√≥w, tj. bread and backed good and other rare.\nAmong the rules sorted by the value of support, the dependence is  if vegetables or fruit and items form products group dairy produce (yogurt or whipped/sour cream) then whole milk or other vegetables  . These rules have relative support over 0,012 (absolute support over 118) and confidence over 50% ( 1 out of 2 transactions will definitely look like this ).\nBasically, the first 30 rules on this list are based on the products groups vegetables, fruit & dairy produce! This is not surprising given the very high support of whole milk (25.6% of transactions contain this item) and other vegetables (19% of transactions). Next frequent products are yogurt, root vegetables & citrus fruit‚Äô (accordingly 14%, 10,9% and 10,5% of transactions) - hence their presence in high-confidence rules not surprising.\nRules with high value of the confidence for products groups\n\ninspect(sort(rules_groc_lvl2_new_3, by = \"confidence\")[1:10])\n\n     lhs                          rhs                 support confidence    coverage     lift count\n[1]  {chocolate,                                                                                   \n      fruit,                                                                                       \n      staple foods}            => {dairy produce} 0.003558719  1.0000000 0.003558719 2.257287    35\n[2]  {eggs,                                                                                        \n      fruit,                                                                                       \n      staple foods}            => {dairy produce} 0.003660397  0.9729730 0.003762074 2.196279    36\n[3]  {cheese,                                                                                      \n      eggs,                                                                                        \n      perfumery}               => {dairy produce} 0.003660397  0.9729730 0.003762074 2.196279    36\n[4]  {eggs,                                                                                        \n      fruit,                                                                                       \n      non-alc. drinks,                                                                             \n      vinegar/oils}            => {dairy produce} 0.003457041  0.9714286 0.003558719 2.192793    34\n[5]  {frozen foods,                                                                                \n      fruit,                                                                                       \n      non-alc. drinks,                                                                             \n      staple foods}            => {dairy produce} 0.003152008  0.9687500 0.003253686 2.186747    31\n[6]  {frozen foods,                                                                                \n      fruit,                                                                                       \n      non-alc. drinks,                                                                             \n      vinegar/oils}            => {dairy produce} 0.003050330  0.9677419 0.003152008 2.184471    30\n[7]  {bread and backed goods,                                                                      \n      cheese,                                                                                      \n      fruit,                                                                                       \n      non-alc. drinks,                                                                             \n      perfumery}               => {dairy produce} 0.003050330  0.9677419 0.003152008 2.184471    30\n[8]  {bread and backed goods,                                                                      \n      fruit,                                                                                       \n      pork,                                                                                        \n      sausage}                 => {dairy produce} 0.004880529  0.9600000 0.005083884 2.166996    48\n[9]  {bread and backed goods,                                                                      \n      cheese,                                                                                      \n      non-alc. drinks,                                                                             \n      perfumery}               => {dairy produce} 0.004270463  0.9545455 0.004473818 2.154683    42\n[10] {bread and backed goods,                                                                      \n      eggs,                                                                                        \n      fruit,                                                                                       \n      vinegar/oils}            => {dairy produce} 0.003863752  0.9500000 0.004067107 2.144423    38\n\n\nand their support:\n\ninspect(sort(rules_groc_lvl2_new_3, by = \"support\")[1:10])\n\n     lhs                                     rhs                     \n[1]  {bread and backed goods}             => {dairy produce}         \n[2]  {vegetables}                         => {dairy produce}         \n[3]  {fruit}                              => {dairy produce}         \n[4]  {sausage}                            => {dairy produce}         \n[5]  {sausage}                            => {bread and backed goods}\n[6]  {cheese}                             => {dairy produce}         \n[7]  {bread and backed goods, vegetables} => {dairy produce}         \n[8]  {fruit, vegetables}                  => {dairy produce}         \n[9]  {dairy produce, fruit}               => {vegetables}            \n[10] {bread and backed goods, fruit}      => {dairy produce}         \n     support    confidence coverage  lift     count\n[1]  0.18769700 0.5432607  0.3455008 1.226295 1846 \n[2]  0.17041179 0.6242086  0.2730046 1.409018 1676 \n[3]  0.15638027 0.6277551  0.2491103 1.417024 1538 \n[4]  0.10737163 0.5677419  0.1891205 1.281557 1056 \n[5]  0.10360956 0.5478495  0.1891205 1.585668 1019 \n[6]  0.08459583 0.6677368  0.1266904 1.507274  832 \n[7]  0.08195221 0.7051619  0.1162176 1.591753  806 \n[8]  0.07869853 0.7350427  0.1070666 1.659203  774 \n[9]  0.07869853 0.5032510  0.1563803 1.843379  774 \n[10] 0.07727504 0.7183365  0.1075750 1.621492  760 \n\n\nThe rule with 100% confidence looks interesting: if products groups chocolate, fruit & staple foods then dairy produce . Other rules with value of confidence bordering on 100% (>97%) are also interesting. However their relative support is negligibly small ~0.003-0.004 (absolute support 30-38). These rules are built of rare (non-frequent) products, but very strong support makes them look at them closely - particular in the context of possible arranging of individual departments in relation to each other.\nThe rules sorted by support provide us with two important pieces of information. The first general rule: that a item from the frequent products group in the antecedent is more than 55% certain to be bought with another item from the frequent group. And the second observation - that it will most likely be a product from th products group dairy produce. For first 5 rules of this set value of support is between 10-18%, that means 10-18% of transaction contain items from this product group (which coincides with the definition of a frequent element from the experiment for frequent items).\n\nFUN FACTS\n\ninspect(\n  sort(\n    subset(rules_groc_lvl2_new_3, subset = lhs %in% \"dairy produce\" & confidence > 0.80), \n    by = \"confidence\"))\n\n     lhs                             rhs                          support confidence    coverage     lift count\n[1]  {dairy produce,                                                                                           \n      frozen foods,                                                                                            \n      fruit,                                                                                                   \n      poultry}                    => {vegetables}             0.004168785  0.8367347 0.004982206 3.064911    41\n[2]  {chocolate,                                                                                               \n      dairy produce,                                                                                           \n      non-alc. drinks,                                                                                         \n      sausage,                                                                                                 \n      vegetables}                 => {bread and backed goods} 0.003558719  0.8333333 0.004270463 2.411958    35\n[3]  {cheese,                                                                                                  \n      dairy produce,                                                                                           \n      fruit,                                                                                                   \n      staple foods}               => {vegetables}             0.003863752  0.8260870 0.004677173 3.025909    38\n[4]  {dairy produce,                                                                                           \n      non-alc. drinks,                                                                                         \n      poultry,                                                                                                 \n      sausage}                    => {bread and backed goods} 0.004067107  0.8163265 0.004982206 2.362734    40\n[5]  {dairy produce,                                                                                           \n      poultry,                                                                                                 \n      staple foods}               => {vegetables}             0.003965430  0.8125000 0.004880529 2.976141    39\n[6]  {chocolate,                                                                                               \n      dairy produce,                                                                                           \n      fruit,                                                                                                   \n      non-alc. drinks,                                                                                         \n      sausage}                    => {bread and backed goods} 0.004372140  0.8113208 0.005388917 2.348246    43\n[7]  {beef,                                                                                                    \n      dairy produce,                                                                                           \n      fruit,                                                                                                   \n      pork}                       => {vegetables}             0.003457041  0.8095238 0.004270463 2.965239    34\n[8]  {dairy produce,                                                                                           \n      fruit,                                                                                                   \n      non-alc. drinks,                                                                                         \n      sausage,                                                                                                 \n      vinegar/oils}               => {bread and backed goods} 0.003863752  0.8085106 0.004778851 2.340112    38\n[9]  {chocolate,                                                                                               \n      dairy produce,                                                                                           \n      long-life bakery products,                                                                               \n      sausage}                    => {bread and backed goods} 0.004270463  0.8076923 0.005287239 2.337744    42\n[10] {chocolate,                                                                                               \n      dairy produce,                                                                                           \n      non-alc. drinks,                                                                                         \n      sausage}                    => {bread and backed goods} 0.007015760  0.8023256 0.008744281 2.322211    69\n\n\nif in LHS products group dairy produce then in RHS with confidence 80% also products group vegetables or bread and backed goods\n\ninspect(\n  sort(\n    subset(rules_groc_lvl2_new_3, subset = lhs %in% \"bread and backed goods\" & confidence > 0.80), \n    by = \"confidence\")[c(1, 64, 128, 194, 258)])\n\n    lhs                          rhs                 support confidence    coverage     lift count\n[1] {bread and backed goods,                                                                      \n     cheese,                                                                                      \n     fruit,                                                                                       \n     non-alc. drinks,                                                                             \n     perfumery}               => {dairy produce} 0.003050330  0.9677419 0.003152008 2.184471    30\n[2] {bread and backed goods,                                                                      \n     cheese,                                                                                      \n     fruit,                                                                                       \n     non-alc. drinks,                                                                             \n     vegetables}              => {dairy produce} 0.007320793  0.8888889 0.008235892 2.006477    72\n[3] {bread and backed goods,                                                                      \n     fruit,                                                                                       \n     sweetener,                                                                                   \n     vegetables}              => {dairy produce} 0.003457041  0.8500000 0.004067107 1.918694    34\n[4] {bread and backed goods,                                                                      \n     fruit,                                                                                       \n     non-alc. drinks,                                                                             \n     perfumery,                                                                                   \n     vegetables}              => {dairy produce} 0.003863752  0.8260870 0.004677173 1.864715    38\n[5] {bread and backed goods,                                                                      \n     perfumery,                                                                                   \n     vegetables}              => {dairy produce} 0.013523132  0.8012048 0.016878495 1.808549   133\n\n\nif in LHS products group bread and backed goods then in RHS with confidence 80% also products group dairy produce (258 rules - 5 chosen)\n\ninspect(\n  sort(\n    subset(rules_groc_lvl2_new_3, subset = lhs %in% \"vegetables\" & confidence > 0.80), \n    by = \"confidence\")[c(1, 67, 134, 200, 267)])\n\n    lhs                             rhs                 support confidence    coverage     lift count\n[1] {frozen foods,                                                                                   \n     long-life bakery products,                                                                      \n     non-alc. drinks,                                                                                \n     vegetables}                 => {dairy produce} 0.003660397  0.9473684 0.003863752 2.138483    36\n[2] {chocolate,                                                                                      \n     staple foods,                                                                                   \n     vegetables}                 => {dairy produce} 0.003762074  0.8809524 0.004270463 1.988562    37\n[3] {bread and backed goods,                                                                         \n     cheese,                                                                                         \n     fruit,                                                                                          \n     sausage,                                                                                        \n     vegetables}                 => {dairy produce} 0.006914082  0.8500000 0.008134215 1.918694    68\n[4] {bread and backed goods,                                                                         \n     fruit,                                                                                          \n     non-alc. drinks,                                                                                \n     perfumery,                                                                                      \n     vegetables}                 => {dairy produce} 0.003863752  0.8260870 0.004677173 1.864715    38\n[5] {bread and backed goods,                                                                         \n     perfumery,                                                                                      \n     vegetables}                 => {dairy produce} 0.013523132  0.8012048 0.016878495 1.808549   133\n\n\nif in LHS products group vegetables then in RHS with confidence 80% also products group dairy produce (267 rules - 5 chosen)\nNOTE Two exeptions - 186 i 258 (bread and backed goods)\n\ninspect(\n  sort(\n    subset(rules_groc_lvl2_new_3, subset = lhs %in% \"vegetables\" & confidence > 0.80), \n    by = \"confidence\")[c(186, 258)])\n\n    lhs                   rhs                          support confidence    coverage     lift count\n[1] {chocolate,                                                                                     \n     dairy produce,                                                                                 \n     non-alc. drinks,                                                                               \n     sausage,                                                                                       \n     vegetables}       => {bread and backed goods} 0.003558719  0.8333333 0.004270463 2.411958    35\n[2] {chocolate,                                                                                     \n     non-alc. drinks,                                                                               \n     sausage,                                                                                       \n     vegetables}       => {bread and backed goods} 0.004168785  0.8039216 0.005185562 2.326830    41\n\n\n\ninspect(\n  sort(\n    subset(rules_groc_lvl2_new_3, subset = rhs %in% \"dairy produce\"), \n    by = \"confidence\")[c(1, 359, 717, 1076, 1434)])\n\n    lhs                          rhs                 support confidence    coverage     lift count\n[1] {chocolate,                                                                                   \n     fruit,                                                                                       \n     staple foods}            => {dairy produce} 0.003558719  1.0000000 0.003558719 2.257287    35\n[2] {cheese,                                                                                      \n     fruit,                                                                                       \n     poultry}                 => {dairy produce} 0.004880529  0.8421053 0.005795628 1.900873    48\n[3] {bread and backed goods,                                                                      \n     non-alc. drinks,                                                                             \n     snacks,                                                                                      \n     vegetables}              => {dairy produce} 0.003050330  0.7894737 0.003863752 1.782069    30\n[4] {bread and backed goods,                                                                      \n     candy,                                                                                       \n     non-alc. drinks}         => {dairy produce} 0.005185562  0.7183099 0.007219115 1.621432    51\n[5] {bags,                                                                                        \n     chocolate}               => {dairy produce} 0.007422471  0.5000000 0.014844942 1.128644    73\n\n\ndairy produce occurs in RHS with confidence over 50% (1434 rules - 1/3 of all created - chosen))\n\ninspect(\n  sort(\n    subset(rules_groc_lvl2_new_3, subset = rhs %in% \"dairy produce\"), \n    by = \"count\")[1:15])\n\n     lhs                          rhs                support confidence   coverage     lift count\n[1]  {bread and backed goods}  => {dairy produce} 0.18769700  0.5432607 0.34550076 1.226295  1846\n[2]  {vegetables}              => {dairy produce} 0.17041179  0.6242086 0.27300458 1.409018  1676\n[3]  {fruit}                   => {dairy produce} 0.15638027  0.6277551 0.24911032 1.417024  1538\n[4]  {sausage}                 => {dairy produce} 0.10737163  0.5677419 0.18912049 1.281557  1056\n[5]  {cheese}                  => {dairy produce} 0.08459583  0.6677368 0.12669039 1.507274   832\n[6]  {bread and backed goods,                                                                    \n      vegetables}              => {dairy produce} 0.08195221  0.7051619 0.11621759 1.591753   806\n[7]  {fruit,                                                                                     \n      vegetables}              => {dairy produce} 0.07869853  0.7350427 0.10706660 1.659203   774\n[8]  {bread and backed goods,                                                                    \n      fruit}                   => {dairy produce} 0.07727504  0.7183365 0.10757499 1.621492   760\n[9]  {bread and backed goods,                                                                    \n      non-alc. drinks}         => {dairy produce} 0.07229283  0.5818331 0.12425013 1.313364   711\n[10] {frozen foods}            => {dairy produce} 0.06710727  0.5739130 0.11692933 1.295487   660\n[11] {non-alc. drinks,                                                                           \n      vegetables}              => {dairy produce} 0.06446365  0.6817204 0.09456024 1.538839   634\n[12] {bread and backed goods,                                                                    \n      sausage}                 => {dairy produce} 0.06395526  0.6172718 0.10360956 1.393360   629\n[13] {fruit,                                                                                     \n      non-alc. drinks}         => {dairy produce} 0.06375191  0.6807818 0.09364514 1.536720   627\n[14] {vinegar/oils}            => {dairy produce} 0.05866802  0.6519774 0.08998475 1.471700   577\n[15] {sausage,                                                                                   \n      vegetables}              => {dairy produce} 0.05266904  0.6906667 0.07625826 1.559033   518\n\n\nThe first three rules has two elements and made up of frequent product groups (if bread and backed goods / vegetables / fruit then dairy produce) - these rules have confidence over 54% and very high support (>15.6%)\n\ninspect(\n  sort(\n    subset(rules_groc_lvl2_new_3, subset = lhs %in% \"non-alc. drinks\" & confidence > 0.80), \n    by = \"support\")[1:10])\n\n     lhs                          rhs                 support confidence   coverage     lift count\n[1]  {frozen foods,                                                                               \n      fruit,                                                                                      \n      non-alc. drinks}         => {dairy produce} 0.015353330  0.8118280 0.01891205 1.832529   151\n[2]  {bread and backed goods,                                                                     \n      non-alc. drinks,                                                                            \n      vinegar/oils}            => {dairy produce} 0.014438231  0.8114286 0.01779359 1.831627   142\n[3]  {fruit,                                                                                      \n      non-alc. drinks,                                                                            \n      vinegar/oils}            => {dairy produce} 0.012608033  0.8104575 0.01555669 1.829435   124\n[4]  {bread and backed goods,                                                                     \n      cheese,                                                                                     \n      fruit,                                                                                      \n      non-alc. drinks}         => {dairy produce} 0.012201322  0.8510638 0.01433655 1.921095   120\n[5]  {cheese,                                                                                     \n      fruit,                                                                                      \n      non-alc. drinks,                                                                            \n      vegetables}              => {dairy produce} 0.011286223  0.8345865 0.01352313 1.883901   111\n[6]  {bread and backed goods,                                                                     \n      cheese,                                                                                     \n      non-alc. drinks,                                                                            \n      vegetables}              => {dairy produce} 0.010981190  0.8780488 0.01250635 1.982008   108\n[7]  {eggs,                                                                                       \n      fruit,                                                                                      \n      non-alc. drinks}         => {dairy produce} 0.010269446  0.8559322 0.01199797 1.932085   101\n[8]  {non-alc. drinks,                                                                            \n      staple foods,                                                                               \n      vegetables}              => {dairy produce} 0.009659380  0.8119658 0.01189629 1.832840    95\n[9]  {cheese,                                                                                     \n      frozen foods,                                                                               \n      non-alc. drinks}         => {dairy produce} 0.009049314  0.8240741 0.01098119 1.860172    89\n[10] {frozen foods,                                                                               \n      fruit,                                                                                      \n      non-alc. drinks,                                                                            \n      vegetables}              => {dairy produce} 0.009049314  0.8557692 0.01057448 1.931717    89\n\ninspect(\n  sort(\n    subset(rules_groc_lvl2_new_3, subset = rhs %in% \"non-alc. drinks\" & confidence > 0.30), \n    by = \"support\")[1:10])\n\n     lhs                            rhs                  support confidence   coverage     lift count\n[1]  {beer,                                                                                          \n      dairy produce}             => {non-alc. drinks} 0.02379258  0.5176991 0.04595831 1.628261   234\n[2]  {bread and backed goods,                                                                        \n      fruit,                                                                                         \n      sausage}                   => {non-alc. drinks} 0.02003050  0.5225464 0.03833249 1.643506   197\n[3]  {beer,                                                                                          \n      vegetables}                => {non-alc. drinks} 0.01718353  0.5044776 0.03406202 1.586676   169\n[4]  {fruit,                                                                                         \n      perfumery}                 => {non-alc. drinks} 0.01657346  0.5309446 0.03121505 1.669920   163\n[5]  {bread and backed goods,                                                                        \n      dairy produce,                                                                                 \n      fruit,                                                                                         \n      sausage}                   => {non-alc. drinks} 0.01596340  0.5215947 0.03060498 1.640513   157\n[6]  {dairy produce,                                                                                 \n      frozen foods,                                                                                  \n      fruit}                     => {non-alc. drinks} 0.01535333  0.5000000 0.03070666 1.572594   151\n[7]  {beer,                                                                                          \n      fruit}                     => {non-alc. drinks} 0.01525165  0.5597015 0.02724962 1.760366   150\n[8]  {bread and backed goods,                                                                        \n      chocolate,                                                                                     \n      dairy produce}             => {non-alc. drinks} 0.01494662  0.5157895 0.02897814 1.622254   147\n[9]  {bags,                                                                                          \n      sausage}                   => {non-alc. drinks} 0.01433655  0.5035714 0.02846975 1.583826   141\n[10] {bread and backed goods,                                                                        \n      dairy produce,                                                                                 \n      long-life bakery products} => {non-alc. drinks} 0.01392984  0.5055351 0.02755465 1.590002   137\n\n\nproducts group non-alc. drinks even if it is frequent product group, it builds rules with low support\n\ninspect(\n  sort(\n    subset(rules_groc_lvl2_new_3, subset = rhs %in% \"vegetables\" & confidence > 0.75), \n    by = \"support\"))\n\n     lhs                          rhs              support confidence    coverage     lift count\n[1]  {dairy produce,                                                                            \n      poultry,                                                                                  \n      sausage}                 => {vegetables} 0.008845958  0.7909091 0.011184545 2.897054    87\n[2]  {bread and backed goods,                                                                   \n      dairy produce,                                                                            \n      fruit,                                                                                    \n      pork}                    => {vegetables} 0.006405694  0.7590361 0.008439248 2.780306    63\n[3]  {bread and backed goods,                                                                   \n      dairy produce,                                                                            \n      poultry,                                                                                  \n      sausage}                 => {vegetables} 0.005795628  0.7702703 0.007524148 2.821456    57\n[4]  {bread and backed goods,                                                                   \n      dairy produce,                                                                            \n      non-alc. drinks,                                                                          \n      pork}                    => {vegetables} 0.005185562  0.7611940 0.006812405 2.788210    51\n[5]  {dairy produce,                                                                            \n      fruit,                                                                                    \n      pork,                                                                                     \n      sausage}                 => {vegetables} 0.005083884  0.7575758 0.006710727 2.774956    50\n[6]  {poultry,                                                                                  \n      staple foods}            => {vegetables} 0.004982206  0.7777778 0.006405694 2.848955    49\n[7]  {dairy produce,                                                                            \n      frozen foods,                                                                             \n      fruit,                                                                                    \n      vinegar/oils}            => {vegetables} 0.004473818  0.7586207 0.005897306 2.778784    44\n[8]  {dairy produce,                                                                            \n      eggs,                                                                                     \n      poultry}                 => {vegetables} 0.004372140  0.7543860 0.005795628 2.763272    43\n[9]  {cheese,                                                                                   \n      fruit,                                                                                    \n      staple foods}            => {vegetables} 0.004168785  0.7884615 0.005287239 2.888089    41\n[10] {dairy produce,                                                                            \n      frozen foods,                                                                             \n      fruit,                                                                                    \n      poultry}                 => {vegetables} 0.004168785  0.8367347 0.004982206 3.064911    41\n[11] {dairy produce,                                                                            \n      poultry,                                                                                  \n      staple foods}            => {vegetables} 0.003965430  0.8125000 0.004880529 2.976141    39\n[12] {beef,                                                                                     \n      fruit,                                                                                    \n      pork}                    => {vegetables} 0.003863752  0.7916667 0.004880529 2.899829    38\n[13] {bread and backed goods,                                                                   \n      fruit,                                                                                    \n      pork,                                                                                     \n      sausage}                 => {vegetables} 0.003863752  0.7600000 0.005083884 2.783836    38\n[14] {cheese,                                                                                   \n      dairy produce,                                                                            \n      fruit,                                                                                    \n      staple foods}            => {vegetables} 0.003863752  0.8260870 0.004677173 3.025909    38\n[15] {beef,                                                                                     \n      beer,                                                                                     \n      bread and backed goods}  => {vegetables} 0.003762074  0.7551020 0.004982206 2.765895    37\n[16] {cheese,                                                                                   \n      poultry,                                                                                  \n      sausage}                 => {vegetables} 0.003457041  0.7555556 0.004575496 2.767556    34\n[17] {beef,                                                                                     \n      dairy produce,                                                                            \n      fruit,                                                                                    \n      pork}                    => {vegetables} 0.003457041  0.8095238 0.004270463 2.965239    34\n[18] {beef,                                                                                     \n      fruit,                                                                                    \n      poultry}                 => {vegetables} 0.003355363  0.7857143 0.004270463 2.878026    33\n[19] {dairy produce,                                                                            \n      eggs,                                                                                     \n      pork}                    => {vegetables} 0.003355363  0.7674419 0.004372140 2.811095    33\n[20] {beef,                                                                                     \n      beer,                                                                                     \n      non-alc. drinks}         => {vegetables} 0.003355363  0.8048780 0.004168785 2.948222    33\n[21] {fruit,                                                                                    \n      poultry,                                                                                  \n      vinegar/oils}            => {vegetables} 0.003253686  0.7619048 0.004270463 2.790813    32\n[22] {cheese,                                                                                   \n      sausage,                                                                                  \n      staple foods}            => {vegetables} 0.003253686  0.7619048 0.004270463 2.790813    32\n[23] {bread and backed goods,                                                                   \n      frozen foods,                                                                             \n      fruit,                                                                                    \n      vinegar/oils}            => {vegetables} 0.003253686  0.8000000 0.004067107 2.930354    32\n[24] {beef,                                                                                     \n      eggs,                                                                                     \n      sausage}                 => {vegetables} 0.003152008  0.7560976 0.004168785 2.769542    31\n[25] {cheese,                                                                                   \n      dairy produce,                                                                            \n      poultry,                                                                                  \n      sausage}                 => {vegetables} 0.003050330  0.7692308 0.003965430 2.817648    30\n\n\nif in RHS products group vegetables then rules have low support below 0.88%\n\ninspect(\n  subset(\n    subset(rules_groc_lvl2_new_3, items %in% \"dairy produce\"), \n    items %in% \"vegetables\")[c(1, 586, 963)])\n\n    lhs                          rhs                          support confidence    coverage     lift count\n[1] {vegetables}              => {dairy produce}          0.170411795  0.6242086 0.273004575 1.409018  1676\n[2] {bread and backed goods,                                                                               \n     frozen foods,                                                                                         \n     pork,                                                                                                 \n     vegetables}              => {dairy produce}          0.003355363  0.8918919 0.003762074 2.013256    33\n[3] {beer,                                                                                                 \n     dairy produce,                                                                                        \n     fruit,                                                                                                \n     vegetables}              => {bread and backed goods} 0.005185562  0.5930233 0.008744281 1.716417    51\n\n\n17% (1676 out of 9835) of transactions contain both dairy produce & vegetables (3 chosen rules)\n\ninspect(\n  subset(\n    subset(rules_groc_lvl2_new_3, items %in% \"bread and backed goods\"), \n    items %in% \"vegetables\")[c(1, 456, 893)])\n\n    lhs                          rhs                          support confidence    coverage     lift count\n[1] {delicatessen,                                                                                         \n     vegetables}              => {bread and backed goods} 0.003355363  0.5789474 0.005795628 1.675676    33\n[2] {bread and backed goods,                                                                               \n     eggs,                                                                                                 \n     vegetables,                                                                                           \n     vinegar/oils}            => {dairy produce}          0.003355363  0.8918919 0.003762074 2.013256    33\n[3] {cheese,                                                                                               \n     dairy produce,                                                                                        \n     fruit,                                                                                                \n     non-alc. drinks,                                                                                      \n     sausage,                                                                                              \n     vegetables}              => {bread and backed goods} 0.003558719  0.7777778 0.004575496 2.251161    35\n\n\n11% (1143 out of 9835) of transactions contain both bread and backed goods and vegetables (3 chosen rules)"
  },
  {
    "objectID": "posts/Groceries/index.html#final-summary",
    "href": "posts/Groceries/index.html#final-summary",
    "title": "Association Rules in Groceries",
    "section": "4.3 FINAL SUMMARY",
    "text": "4.3 FINAL SUMMARY\nThe above analyzes show that it is the most frequently purchased product is whole milk, and 1/3 rules as the consequence have dairy produce. Hence, the dairy department should be at the very end of the store, so that the customer has to go as far as possible. If vegetables & fruit then also whole milk is a strong dependency, hence the fruit and vegetable department should be at the very beginning of the store. Especially since rules having vegetables in the consequent have very little support.\nStrong correlation was observed in rules based on frequent product groups between dairy produce & bread and backed goods, which would imply that the bread department should be located next to the fruit and vegetable department, possibly divided by a rare department (impulse purchases).\nrolls/buns are a particularly popular product (18% transactions), therefore, it is recommended to focus especially on the development offer of these products. Taking into account high support for whole milk (25% transactions), it cannot be missing from the offer. It should be mentioned that yogurt has a similarly high position (14% transactions).\nIt is worth noting that while the products group non-alc. drinks is frequent, it does not produce frequent rules. Quite low support for this group would suggest locating the drinks section on the side of the store."
  }
]